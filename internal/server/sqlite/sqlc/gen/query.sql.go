// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package sqlc

import (
	"context"
)

const getAllBinaries = `-- name: GetAllBinaries :many
SELECT name, filename, notes, user
FROM binary
WHERE user = ?
`

func (q *Queries) GetAllBinaries(ctx context.Context, user string) ([]*Binary, error) {
	rows, err := q.db.QueryContext(ctx, getAllBinaries, user)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Binary
	for rows.Next() {
		var i Binary
		if err := rows.Scan(
			&i.Name,
			&i.Filename,
			&i.Notes,
			&i.User,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllCards = `-- name: GetAllCards :many
SELECT name, number, exp_date, cvv, cardholder, notes, user
FROM card
WHERE user = ?
`

func (q *Queries) GetAllCards(ctx context.Context, user string) ([]*Card, error) {
	rows, err := q.db.QueryContext(ctx, getAllCards, user)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Card
	for rows.Next() {
		var i Card
		if err := rows.Scan(
			&i.Name,
			&i.Number,
			&i.ExpDate,
			&i.Cvv,
			&i.Cardholder,
			&i.Notes,
			&i.User,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllLogins = `-- name: GetAllLogins :many
SELECT name, login, password, website, notes, user
FROM login
WHERE user = ?
`

func (q *Queries) GetAllLogins(ctx context.Context, user string) ([]*Login, error) {
	rows, err := q.db.QueryContext(ctx, getAllLogins, user)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Login
	for rows.Next() {
		var i Login
		if err := rows.Scan(
			&i.Name,
			&i.Login,
			&i.Password,
			&i.Website,
			&i.Notes,
			&i.User,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllNotes = `-- name: GetAllNotes :many
SELECT name, text, user
FROM note
WHERE user = ?
`

func (q *Queries) GetAllNotes(ctx context.Context, user string) ([]*Note, error) {
	rows, err := q.db.QueryContext(ctx, getAllNotes, user)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Note
	for rows.Next() {
		var i Note
		if err := rows.Scan(&i.Name, &i.Text, &i.User); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBinary = `-- name: GetBinary :one
SELECT name, filename, notes, user
FROM binary
WHERE name = ?
  AND user = ?
`

func (q *Queries) GetBinary(ctx context.Context, name string, user string) (*Binary, error) {
	row := q.db.QueryRowContext(ctx, getBinary, name, user)
	var i Binary
	err := row.Scan(
		&i.Name,
		&i.Filename,
		&i.Notes,
		&i.User,
	)
	return &i, err
}

const getUserForLogin = `-- name: GetUserForLogin :one
SELECT login, password
FROM user
WHERE login = ?
`

func (q *Queries) GetUserForLogin(ctx context.Context, login string) (*User, error) {
	row := q.db.QueryRowContext(ctx, getUserForLogin, login)
	var i User
	err := row.Scan(&i.Login, &i.Password)
	return &i, err
}

const removeBinary = `-- name: RemoveBinary :execrows
DELETE
FROM binary
WHERE name = ?
`

func (q *Queries) RemoveBinary(ctx context.Context, name string) (int64, error) {
	result, err := q.db.ExecContext(ctx, removeBinary, name)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const removeCard = `-- name: RemoveCard :execrows
DELETE
FROM card
WHERE name = ?
`

func (q *Queries) RemoveCard(ctx context.Context, name string) (int64, error) {
	result, err := q.db.ExecContext(ctx, removeCard, name)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const removeLogin = `-- name: RemoveLogin :execrows
DELETE
FROM login
WHERE name = ?
`

func (q *Queries) RemoveLogin(ctx context.Context, name string) (int64, error) {
	result, err := q.db.ExecContext(ctx, removeLogin, name)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const removeNote = `-- name: RemoveNote :execrows
DELETE
FROM note
WHERE name = ?
`

func (q *Queries) RemoveNote(ctx context.Context, name string) (int64, error) {
	result, err := q.db.ExecContext(ctx, removeNote, name)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const saveBinary = `-- name: SaveBinary :exec
INSERT INTO binary (name, filename, notes, user)
VALUES (?, ?, ?, ?)
`

type SaveBinaryParams struct {
	Name     string
	Filename string
	Notes    *string
	User     string
}

func (q *Queries) SaveBinary(ctx context.Context, arg SaveBinaryParams) error {
	_, err := q.db.ExecContext(ctx, saveBinary,
		arg.Name,
		arg.Filename,
		arg.Notes,
		arg.User,
	)
	return err
}

const saveCard = `-- name: SaveCard :exec
INSERT INTO card (name, number, exp_date, cvv, cardholder, notes, user)
VALUES (?, ?, ?, ?, ?, ?, ?)
`

type SaveCardParams struct {
	Name       string
	Number     string
	ExpDate    string
	Cvv        string
	Cardholder string
	Notes      *string
	User       string
}

func (q *Queries) SaveCard(ctx context.Context, arg SaveCardParams) error {
	_, err := q.db.ExecContext(ctx, saveCard,
		arg.Name,
		arg.Number,
		arg.ExpDate,
		arg.Cvv,
		arg.Cardholder,
		arg.Notes,
		arg.User,
	)
	return err
}

const saveLogin = `-- name: SaveLogin :exec
INSERT INTO login (name, login, password, website, notes, user)
VALUES (?, ?, ?, ?, ?, ?)
`

type SaveLoginParams struct {
	Name     string
	Login    string
	Password *string
	Website  *string
	Notes    *string
	User     string
}

func (q *Queries) SaveLogin(ctx context.Context, arg SaveLoginParams) error {
	_, err := q.db.ExecContext(ctx, saveLogin,
		arg.Name,
		arg.Login,
		arg.Password,
		arg.Website,
		arg.Notes,
		arg.User,
	)
	return err
}

const saveNote = `-- name: SaveNote :exec
INSERT INTO note (name, text, user)
VALUES (?, ?, ?)
`

type SaveNoteParams struct {
	Name string
	Text *string
	User string
}

func (q *Queries) SaveNote(ctx context.Context, arg SaveNoteParams) error {
	_, err := q.db.ExecContext(ctx, saveNote, arg.Name, arg.Text, arg.User)
	return err
}

const saveUser = `-- name: SaveUser :exec
INSERT INTO user (login, password)
VALUES (?, ?)
`

func (q *Queries) SaveUser(ctx context.Context, login string, password string) error {
	_, err := q.db.ExecContext(ctx, saveUser, login, password)
	return err
}

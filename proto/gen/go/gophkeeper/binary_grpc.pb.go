// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: binary.proto

package gophkeeperv1

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BinaryService_Upload_FullMethodName   = "/gophkeeper.BinaryService/Upload"
	BinaryService_GetAll_FullMethodName   = "/gophkeeper.BinaryService/GetAll"
	BinaryService_Remove_FullMethodName   = "/gophkeeper.BinaryService/Remove"
	BinaryService_Download_FullMethodName = "/gophkeeper.BinaryService/Download"
)

// BinaryServiceClient is the client API for BinaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BinaryServiceClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SaveBinaryRequest, empty.Empty], error)
	GetAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetAllBinariesResponse, error)
	Remove(ctx context.Context, in *RemoveDataRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Download(ctx context.Context, in *DownloadBinaryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadBinaryResponse], error)
}

type binaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBinaryServiceClient(cc grpc.ClientConnInterface) BinaryServiceClient {
	return &binaryServiceClient{cc}
}

func (c *binaryServiceClient) Upload(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SaveBinaryRequest, empty.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BinaryService_ServiceDesc.Streams[0], BinaryService_Upload_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SaveBinaryRequest, empty.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BinaryService_UploadClient = grpc.ClientStreamingClient[SaveBinaryRequest, empty.Empty]

func (c *binaryServiceClient) GetAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetAllBinariesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllBinariesResponse)
	err := c.cc.Invoke(ctx, BinaryService_GetAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binaryServiceClient) Remove(ctx context.Context, in *RemoveDataRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, BinaryService_Remove_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binaryServiceClient) Download(ctx context.Context, in *DownloadBinaryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadBinaryResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &BinaryService_ServiceDesc.Streams[1], BinaryService_Download_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DownloadBinaryRequest, DownloadBinaryResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BinaryService_DownloadClient = grpc.ServerStreamingClient[DownloadBinaryResponse]

// BinaryServiceServer is the server API for BinaryService service.
// All implementations must embed UnimplementedBinaryServiceServer
// for forward compatibility.
type BinaryServiceServer interface {
	Upload(grpc.ClientStreamingServer[SaveBinaryRequest, empty.Empty]) error
	GetAll(context.Context, *empty.Empty) (*GetAllBinariesResponse, error)
	Remove(context.Context, *RemoveDataRequest) (*empty.Empty, error)
	Download(*DownloadBinaryRequest, grpc.ServerStreamingServer[DownloadBinaryResponse]) error
	mustEmbedUnimplementedBinaryServiceServer()
}

// UnimplementedBinaryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBinaryServiceServer struct{}

func (UnimplementedBinaryServiceServer) Upload(grpc.ClientStreamingServer[SaveBinaryRequest, empty.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedBinaryServiceServer) GetAll(context.Context, *empty.Empty) (*GetAllBinariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedBinaryServiceServer) Remove(context.Context, *RemoveDataRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedBinaryServiceServer) Download(*DownloadBinaryRequest, grpc.ServerStreamingServer[DownloadBinaryResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedBinaryServiceServer) mustEmbedUnimplementedBinaryServiceServer() {}
func (UnimplementedBinaryServiceServer) testEmbeddedByValue()                       {}

// UnsafeBinaryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BinaryServiceServer will
// result in compilation errors.
type UnsafeBinaryServiceServer interface {
	mustEmbedUnimplementedBinaryServiceServer()
}

func RegisterBinaryServiceServer(s grpc.ServiceRegistrar, srv BinaryServiceServer) {
	// If the following call pancis, it indicates UnimplementedBinaryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BinaryService_ServiceDesc, srv)
}

func _BinaryService_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BinaryServiceServer).Upload(&grpc.GenericServerStream[SaveBinaryRequest, empty.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BinaryService_UploadServer = grpc.ClientStreamingServer[SaveBinaryRequest, empty.Empty]

func _BinaryService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinaryServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BinaryService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinaryServiceServer).GetAll(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinaryService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinaryServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BinaryService_Remove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinaryServiceServer).Remove(ctx, req.(*RemoveDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinaryService_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadBinaryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BinaryServiceServer).Download(m, &grpc.GenericServerStream[DownloadBinaryRequest, DownloadBinaryResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type BinaryService_DownloadServer = grpc.ServerStreamingServer[DownloadBinaryResponse]

// BinaryService_ServiceDesc is the grpc.ServiceDesc for BinaryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BinaryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gophkeeper.BinaryService",
	HandlerType: (*BinaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _BinaryService_GetAll_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _BinaryService_Remove_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _BinaryService_Upload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Download",
			Handler:       _BinaryService_Download_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "binary.proto",
}

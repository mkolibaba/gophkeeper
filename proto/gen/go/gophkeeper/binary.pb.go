// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.30.2
// source: binary.proto

package gophkeeperv1

import (
	empty "github.com/golang/protobuf/ptypes/empty"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Binary struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          int64                  `protobuf:"varint,1,opt,name=id"`
	xxx_hidden_Name        *string                `protobuf:"bytes,2,opt,name=name"`
	xxx_hidden_Filename    *string                `protobuf:"bytes,3,opt,name=filename"`
	xxx_hidden_Size        int64                  `protobuf:"varint,4,opt,name=size"`
	xxx_hidden_Notes       *string                `protobuf:"bytes,5,opt,name=notes"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Binary) Reset() {
	*x = Binary{}
	mi := &file_binary_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Binary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Binary) ProtoMessage() {}

func (x *Binary) ProtoReflect() protoreflect.Message {
	mi := &file_binary_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Binary) GetId() int64 {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return 0
}

func (x *Binary) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *Binary) GetFilename() string {
	if x != nil {
		if x.xxx_hidden_Filename != nil {
			return *x.xxx_hidden_Filename
		}
		return ""
	}
	return ""
}

func (x *Binary) GetSize() int64 {
	if x != nil {
		return x.xxx_hidden_Size
	}
	return 0
}

func (x *Binary) GetNotes() string {
	if x != nil {
		if x.xxx_hidden_Notes != nil {
			return *x.xxx_hidden_Notes
		}
		return ""
	}
	return ""
}

func (x *Binary) SetId(v int64) {
	x.xxx_hidden_Id = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 5)
}

func (x *Binary) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 5)
}

func (x *Binary) SetFilename(v string) {
	x.xxx_hidden_Filename = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 5)
}

func (x *Binary) SetSize(v int64) {
	x.xxx_hidden_Size = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 5)
}

func (x *Binary) SetNotes(v string) {
	x.xxx_hidden_Notes = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 5)
}

func (x *Binary) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Binary) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Binary) HasFilename() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *Binary) HasSize() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *Binary) HasNotes() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *Binary) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = 0
}

func (x *Binary) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Name = nil
}

func (x *Binary) ClearFilename() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Filename = nil
}

func (x *Binary) ClearSize() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Size = 0
}

func (x *Binary) ClearNotes() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_Notes = nil
}

type Binary_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id       *int64
	Name     *string
	Filename *string
	Size     *int64
	Notes    *string
}

func (b0 Binary_builder) Build() *Binary {
	m0 := &Binary{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 5)
		x.xxx_hidden_Id = *b.Id
	}
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 5)
		x.xxx_hidden_Name = b.Name
	}
	if b.Filename != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 5)
		x.xxx_hidden_Filename = b.Filename
	}
	if b.Size != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 5)
		x.xxx_hidden_Size = *b.Size
	}
	if b.Notes != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 5)
		x.xxx_hidden_Notes = b.Notes
	}
	return m0
}

type FileChunk struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Data        []byte                 `protobuf:"bytes,1,opt,name=data"`
	xxx_hidden_Index       int32                  `protobuf:"varint,2,opt,name=index"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *FileChunk) Reset() {
	*x = FileChunk{}
	mi := &file_binary_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileChunk) ProtoMessage() {}

func (x *FileChunk) ProtoReflect() protoreflect.Message {
	mi := &file_binary_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *FileChunk) GetData() []byte {
	if x != nil {
		return x.xxx_hidden_Data
	}
	return nil
}

func (x *FileChunk) GetIndex() int32 {
	if x != nil {
		return x.xxx_hidden_Index
	}
	return 0
}

func (x *FileChunk) SetData(v []byte) {
	if v == nil {
		v = []byte{}
	}
	x.xxx_hidden_Data = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *FileChunk) SetIndex(v int32) {
	x.xxx_hidden_Index = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 2)
}

func (x *FileChunk) HasData() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *FileChunk) HasIndex() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *FileChunk) ClearData() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Data = nil
}

func (x *FileChunk) ClearIndex() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Index = 0
}

type FileChunk_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Data  []byte
	Index *int32
}

func (b0 FileChunk_builder) Build() *FileChunk {
	m0 := &FileChunk{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Data != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Data = b.Data
	}
	if b.Index != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 2)
		x.xxx_hidden_Index = *b.Index
	}
	return m0
}

type SaveBinaryRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Chunk       *FileChunk             `protobuf:"bytes,1,opt,name=chunk"`
	xxx_hidden_Name        *string                `protobuf:"bytes,2,opt,name=name"`
	xxx_hidden_Filename    *string                `protobuf:"bytes,3,opt,name=filename"`
	xxx_hidden_Size        int64                  `protobuf:"varint,4,opt,name=size"`
	xxx_hidden_Notes       *string                `protobuf:"bytes,5,opt,name=notes"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *SaveBinaryRequest) Reset() {
	*x = SaveBinaryRequest{}
	mi := &file_binary_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveBinaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveBinaryRequest) ProtoMessage() {}

func (x *SaveBinaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_binary_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *SaveBinaryRequest) GetChunk() *FileChunk {
	if x != nil {
		return x.xxx_hidden_Chunk
	}
	return nil
}

func (x *SaveBinaryRequest) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *SaveBinaryRequest) GetFilename() string {
	if x != nil {
		if x.xxx_hidden_Filename != nil {
			return *x.xxx_hidden_Filename
		}
		return ""
	}
	return ""
}

func (x *SaveBinaryRequest) GetSize() int64 {
	if x != nil {
		return x.xxx_hidden_Size
	}
	return 0
}

func (x *SaveBinaryRequest) GetNotes() string {
	if x != nil {
		if x.xxx_hidden_Notes != nil {
			return *x.xxx_hidden_Notes
		}
		return ""
	}
	return ""
}

func (x *SaveBinaryRequest) SetChunk(v *FileChunk) {
	x.xxx_hidden_Chunk = v
}

func (x *SaveBinaryRequest) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 5)
}

func (x *SaveBinaryRequest) SetFilename(v string) {
	x.xxx_hidden_Filename = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 5)
}

func (x *SaveBinaryRequest) SetSize(v int64) {
	x.xxx_hidden_Size = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 5)
}

func (x *SaveBinaryRequest) SetNotes(v string) {
	x.xxx_hidden_Notes = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 5)
}

func (x *SaveBinaryRequest) HasChunk() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Chunk != nil
}

func (x *SaveBinaryRequest) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *SaveBinaryRequest) HasFilename() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *SaveBinaryRequest) HasSize() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *SaveBinaryRequest) HasNotes() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *SaveBinaryRequest) ClearChunk() {
	x.xxx_hidden_Chunk = nil
}

func (x *SaveBinaryRequest) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Name = nil
}

func (x *SaveBinaryRequest) ClearFilename() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Filename = nil
}

func (x *SaveBinaryRequest) ClearSize() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Size = 0
}

func (x *SaveBinaryRequest) ClearNotes() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_Notes = nil
}

type SaveBinaryRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Chunk    *FileChunk
	Name     *string
	Filename *string
	Size     *int64
	Notes    *string
}

func (b0 SaveBinaryRequest_builder) Build() *SaveBinaryRequest {
	m0 := &SaveBinaryRequest{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Chunk = b.Chunk
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 5)
		x.xxx_hidden_Name = b.Name
	}
	if b.Filename != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 5)
		x.xxx_hidden_Filename = b.Filename
	}
	if b.Size != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 5)
		x.xxx_hidden_Size = *b.Size
	}
	if b.Notes != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 5)
		x.xxx_hidden_Notes = b.Notes
	}
	return m0
}

type DownloadBinaryRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          int64                  `protobuf:"varint,1,opt,name=id"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *DownloadBinaryRequest) Reset() {
	*x = DownloadBinaryRequest{}
	mi := &file_binary_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadBinaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadBinaryRequest) ProtoMessage() {}

func (x *DownloadBinaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_binary_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DownloadBinaryRequest) GetId() int64 {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return 0
}

func (x *DownloadBinaryRequest) SetId(v int64) {
	x.xxx_hidden_Id = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *DownloadBinaryRequest) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *DownloadBinaryRequest) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = 0
}

type DownloadBinaryRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id *int64
}

func (b0 DownloadBinaryRequest_builder) Build() *DownloadBinaryRequest {
	m0 := &DownloadBinaryRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_Id = *b.Id
	}
	return m0
}

type DownloadBinaryResponse struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Chunk       *FileChunk             `protobuf:"bytes,1,opt,name=chunk"`
	xxx_hidden_Name        *string                `protobuf:"bytes,2,opt,name=name"`
	xxx_hidden_Filename    *string                `protobuf:"bytes,3,opt,name=filename"`
	xxx_hidden_Size        int64                  `protobuf:"varint,4,opt,name=size"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *DownloadBinaryResponse) Reset() {
	*x = DownloadBinaryResponse{}
	mi := &file_binary_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadBinaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadBinaryResponse) ProtoMessage() {}

func (x *DownloadBinaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_binary_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DownloadBinaryResponse) GetChunk() *FileChunk {
	if x != nil {
		return x.xxx_hidden_Chunk
	}
	return nil
}

func (x *DownloadBinaryResponse) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *DownloadBinaryResponse) GetFilename() string {
	if x != nil {
		if x.xxx_hidden_Filename != nil {
			return *x.xxx_hidden_Filename
		}
		return ""
	}
	return ""
}

func (x *DownloadBinaryResponse) GetSize() int64 {
	if x != nil {
		return x.xxx_hidden_Size
	}
	return 0
}

func (x *DownloadBinaryResponse) SetChunk(v *FileChunk) {
	x.xxx_hidden_Chunk = v
}

func (x *DownloadBinaryResponse) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 4)
}

func (x *DownloadBinaryResponse) SetFilename(v string) {
	x.xxx_hidden_Filename = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 4)
}

func (x *DownloadBinaryResponse) SetSize(v int64) {
	x.xxx_hidden_Size = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 4)
}

func (x *DownloadBinaryResponse) HasChunk() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Chunk != nil
}

func (x *DownloadBinaryResponse) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *DownloadBinaryResponse) HasFilename() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *DownloadBinaryResponse) HasSize() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *DownloadBinaryResponse) ClearChunk() {
	x.xxx_hidden_Chunk = nil
}

func (x *DownloadBinaryResponse) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Name = nil
}

func (x *DownloadBinaryResponse) ClearFilename() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Filename = nil
}

func (x *DownloadBinaryResponse) ClearSize() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Size = 0
}

type DownloadBinaryResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Chunk    *FileChunk
	Name     *string
	Filename *string
	Size     *int64
}

func (b0 DownloadBinaryResponse_builder) Build() *DownloadBinaryResponse {
	m0 := &DownloadBinaryResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Chunk = b.Chunk
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 4)
		x.xxx_hidden_Name = b.Name
	}
	if b.Filename != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 4)
		x.xxx_hidden_Filename = b.Filename
	}
	if b.Size != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 4)
		x.xxx_hidden_Size = *b.Size
	}
	return m0
}

type GetAllBinariesResponse struct {
	state             protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Result *[]*Binary             `protobuf:"bytes,1,rep,name=result"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetAllBinariesResponse) Reset() {
	*x = GetAllBinariesResponse{}
	mi := &file_binary_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllBinariesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllBinariesResponse) ProtoMessage() {}

func (x *GetAllBinariesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_binary_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetAllBinariesResponse) GetResult() []*Binary {
	if x != nil {
		if x.xxx_hidden_Result != nil {
			return *x.xxx_hidden_Result
		}
	}
	return nil
}

func (x *GetAllBinariesResponse) SetResult(v []*Binary) {
	x.xxx_hidden_Result = &v
}

type GetAllBinariesResponse_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Result []*Binary
}

func (b0 GetAllBinariesResponse_builder) Build() *GetAllBinariesResponse {
	m0 := &GetAllBinariesResponse{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Result = &b.Result
	return m0
}

type UpdateBinaryRequest struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          int64                  `protobuf:"varint,1,opt,name=id"`
	xxx_hidden_Name        *string                `protobuf:"bytes,2,opt,name=name"`
	xxx_hidden_Notes       *string                `protobuf:"bytes,3,opt,name=notes"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UpdateBinaryRequest) Reset() {
	*x = UpdateBinaryRequest{}
	mi := &file_binary_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBinaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBinaryRequest) ProtoMessage() {}

func (x *UpdateBinaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_binary_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UpdateBinaryRequest) GetId() int64 {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return 0
}

func (x *UpdateBinaryRequest) GetName() string {
	if x != nil {
		if x.xxx_hidden_Name != nil {
			return *x.xxx_hidden_Name
		}
		return ""
	}
	return ""
}

func (x *UpdateBinaryRequest) GetNotes() string {
	if x != nil {
		if x.xxx_hidden_Notes != nil {
			return *x.xxx_hidden_Notes
		}
		return ""
	}
	return ""
}

func (x *UpdateBinaryRequest) SetId(v int64) {
	x.xxx_hidden_Id = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 3)
}

func (x *UpdateBinaryRequest) SetName(v string) {
	x.xxx_hidden_Name = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *UpdateBinaryRequest) SetNotes(v string) {
	x.xxx_hidden_Notes = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *UpdateBinaryRequest) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *UpdateBinaryRequest) HasName() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *UpdateBinaryRequest) HasNotes() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *UpdateBinaryRequest) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = 0
}

func (x *UpdateBinaryRequest) ClearName() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Name = nil
}

func (x *UpdateBinaryRequest) ClearNotes() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Notes = nil
}

type UpdateBinaryRequest_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Id    *int64
	Name  *string
	Notes *string
}

func (b0 UpdateBinaryRequest_builder) Build() *UpdateBinaryRequest {
	m0 := &UpdateBinaryRequest{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 3)
		x.xxx_hidden_Id = *b.Id
	}
	if b.Name != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_Name = b.Name
	}
	if b.Notes != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_Notes = b.Notes
	}
	return m0
}

var File_binary_proto protoreflect.FileDescriptor

const file_binary_proto_rawDesc = "" +
	"\n" +
	"\fbinary.proto\x12\n" +
	"gophkeeper\x1a\x1bgoogle/protobuf/empty.proto\x1a\n" +
	"data.proto\"r\n" +
	"\x06Binary\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1a\n" +
	"\bfilename\x18\x03 \x01(\tR\bfilename\x12\x12\n" +
	"\x04size\x18\x04 \x01(\x03R\x04size\x12\x14\n" +
	"\x05notes\x18\x05 \x01(\tR\x05notes\"5\n" +
	"\tFileChunk\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\x12\x14\n" +
	"\x05index\x18\x02 \x01(\x05R\x05index\"\x9a\x01\n" +
	"\x11SaveBinaryRequest\x12+\n" +
	"\x05chunk\x18\x01 \x01(\v2\x15.gophkeeper.FileChunkR\x05chunk\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1a\n" +
	"\bfilename\x18\x03 \x01(\tR\bfilename\x12\x12\n" +
	"\x04size\x18\x04 \x01(\x03R\x04size\x12\x14\n" +
	"\x05notes\x18\x05 \x01(\tR\x05notes\"'\n" +
	"\x15DownloadBinaryRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\"\x89\x01\n" +
	"\x16DownloadBinaryResponse\x12+\n" +
	"\x05chunk\x18\x01 \x01(\v2\x15.gophkeeper.FileChunkR\x05chunk\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1a\n" +
	"\bfilename\x18\x03 \x01(\tR\bfilename\x12\x12\n" +
	"\x04size\x18\x04 \x01(\x03R\x04size\"D\n" +
	"\x16GetAllBinariesResponse\x12*\n" +
	"\x06result\x18\x01 \x03(\v2\x12.gophkeeper.BinaryR\x06result\"O\n" +
	"\x13UpdateBinaryRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05notes\x18\x03 \x01(\tR\x05notes2\xf1\x02\n" +
	"\rBinaryService\x12A\n" +
	"\x06Upload\x12\x1d.gophkeeper.SaveBinaryRequest\x1a\x16.google.protobuf.Empty(\x01\x12S\n" +
	"\bDownload\x12!.gophkeeper.DownloadBinaryRequest\x1a\".gophkeeper.DownloadBinaryResponse0\x01\x12D\n" +
	"\x06GetAll\x12\x16.google.protobuf.Empty\x1a\".gophkeeper.GetAllBinariesResponse\x12A\n" +
	"\x06Update\x12\x1f.gophkeeper.UpdateBinaryRequest\x1a\x16.google.protobuf.Empty\x12?\n" +
	"\x06Remove\x12\x1d.gophkeeper.RemoveDataRequest\x1a\x16.google.protobuf.EmptyB\x1cZ\x1agophkeeper.v1;gophkeeperv1b\beditionsp\xe8\a"

var file_binary_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_binary_proto_goTypes = []any{
	(*Binary)(nil),                 // 0: gophkeeper.Binary
	(*FileChunk)(nil),              // 1: gophkeeper.FileChunk
	(*SaveBinaryRequest)(nil),      // 2: gophkeeper.SaveBinaryRequest
	(*DownloadBinaryRequest)(nil),  // 3: gophkeeper.DownloadBinaryRequest
	(*DownloadBinaryResponse)(nil), // 4: gophkeeper.DownloadBinaryResponse
	(*GetAllBinariesResponse)(nil), // 5: gophkeeper.GetAllBinariesResponse
	(*UpdateBinaryRequest)(nil),    // 6: gophkeeper.UpdateBinaryRequest
	(*empty.Empty)(nil),            // 7: google.protobuf.Empty
	(*RemoveDataRequest)(nil),      // 8: gophkeeper.RemoveDataRequest
}
var file_binary_proto_depIdxs = []int32{
	1, // 0: gophkeeper.SaveBinaryRequest.chunk:type_name -> gophkeeper.FileChunk
	1, // 1: gophkeeper.DownloadBinaryResponse.chunk:type_name -> gophkeeper.FileChunk
	0, // 2: gophkeeper.GetAllBinariesResponse.result:type_name -> gophkeeper.Binary
	2, // 3: gophkeeper.BinaryService.Upload:input_type -> gophkeeper.SaveBinaryRequest
	3, // 4: gophkeeper.BinaryService.Download:input_type -> gophkeeper.DownloadBinaryRequest
	7, // 5: gophkeeper.BinaryService.GetAll:input_type -> google.protobuf.Empty
	6, // 6: gophkeeper.BinaryService.Update:input_type -> gophkeeper.UpdateBinaryRequest
	8, // 7: gophkeeper.BinaryService.Remove:input_type -> gophkeeper.RemoveDataRequest
	7, // 8: gophkeeper.BinaryService.Upload:output_type -> google.protobuf.Empty
	4, // 9: gophkeeper.BinaryService.Download:output_type -> gophkeeper.DownloadBinaryResponse
	5, // 10: gophkeeper.BinaryService.GetAll:output_type -> gophkeeper.GetAllBinariesResponse
	7, // 11: gophkeeper.BinaryService.Update:output_type -> google.protobuf.Empty
	7, // 12: gophkeeper.BinaryService.Remove:output_type -> google.protobuf.Empty
	8, // [8:13] is the sub-list for method output_type
	3, // [3:8] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_binary_proto_init() }
func file_binary_proto_init() {
	if File_binary_proto != nil {
		return
	}
	file_data_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_binary_proto_rawDesc), len(file_binary_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_binary_proto_goTypes,
		DependencyIndexes: file_binary_proto_depIdxs,
		MessageInfos:      file_binary_proto_msgTypes,
	}.Build()
	File_binary_proto = out.File
	file_binary_proto_goTypes = nil
	file_binary_proto_depIdxs = nil
}

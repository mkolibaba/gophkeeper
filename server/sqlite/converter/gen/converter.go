// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package gen

import (
	"context"
	server "github.com/mkolibaba/gophkeeper/server"
	converter "github.com/mkolibaba/gophkeeper/server/sqlite/converter"
	gen "github.com/mkolibaba/gophkeeper/server/sqlite/sqlc/gen"
)

type DataConverterImpl struct{}

func (c *DataConverterImpl) ConvertToBinaryData(source gen.Binary) server.BinaryData {
	var serverBinaryData server.BinaryData
	serverBinaryData.ID = source.ID
	serverBinaryData.Name = source.Name
	serverBinaryData.Filename = source.Filename
	serverBinaryData.Size = source.Size
	if source.Notes != nil {
		serverBinaryData.Notes = *source.Notes
	}
	return serverBinaryData
}
func (c *DataConverterImpl) ConvertToBinaryDataSlice(source []gen.Binary) []server.BinaryData {
	var serverBinaryDataList []server.BinaryData
	if source != nil {
		serverBinaryDataList = make([]server.BinaryData, len(source))
		for i := 0; i < len(source); i++ {
			serverBinaryDataList[i] = c.ConvertToBinaryData(source[i])
		}
	}
	return serverBinaryDataList
}
func (c *DataConverterImpl) ConvertToCardData(source gen.Card) server.CardData {
	var serverCardData server.CardData
	serverCardData.ID = source.ID
	serverCardData.Name = source.Name
	serverCardData.Number = source.Number
	serverCardData.ExpDate = source.ExpDate
	serverCardData.CVV = source.Cvv
	serverCardData.Cardholder = source.Cardholder
	if source.Notes != nil {
		serverCardData.Notes = *source.Notes
	}
	return serverCardData
}
func (c *DataConverterImpl) ConvertToCardDataSlice(source []gen.Card) []server.CardData {
	var serverCardDataList []server.CardData
	if source != nil {
		serverCardDataList = make([]server.CardData, len(source))
		for i := 0; i < len(source); i++ {
			serverCardDataList[i] = c.ConvertToCardData(source[i])
		}
	}
	return serverCardDataList
}
func (c *DataConverterImpl) ConvertToInsertBinary(context context.Context, source server.ReadableBinaryData) gen.InsertBinaryParams {
	var sqlcInsertBinaryParams gen.InsertBinaryParams
	sqlcInsertBinaryParams.Name = source.BinaryData.Name
	sqlcInsertBinaryParams.Filename = source.BinaryData.Filename
	sqlcInsertBinaryParams.Size = source.BinaryData.Size
	pString := source.BinaryData.Notes
	sqlcInsertBinaryParams.Notes = &pString
	sqlcInsertBinaryParams.User = converter.UserFromContext(context)
	return sqlcInsertBinaryParams
}
func (c *DataConverterImpl) ConvertToInsertCard(context context.Context, source server.CardData) gen.InsertCardParams {
	var sqlcInsertCardParams gen.InsertCardParams
	sqlcInsertCardParams.Name = source.Name
	sqlcInsertCardParams.Number = source.Number
	sqlcInsertCardParams.ExpDate = source.ExpDate
	sqlcInsertCardParams.Cvv = source.CVV
	sqlcInsertCardParams.Cardholder = source.Cardholder
	pString := source.Notes
	sqlcInsertCardParams.Notes = &pString
	sqlcInsertCardParams.User = converter.UserFromContext(context)
	return sqlcInsertCardParams
}
func (c *DataConverterImpl) ConvertToInsertLogin(context context.Context, source server.LoginData) gen.InsertLoginParams {
	var sqlcInsertLoginParams gen.InsertLoginParams
	sqlcInsertLoginParams.Name = source.Name
	sqlcInsertLoginParams.Login = source.Login
	pString := source.Password
	sqlcInsertLoginParams.Password = &pString
	pString2 := source.Website
	sqlcInsertLoginParams.Website = &pString2
	pString3 := source.Notes
	sqlcInsertLoginParams.Notes = &pString3
	sqlcInsertLoginParams.User = converter.UserFromContext(context)
	return sqlcInsertLoginParams
}
func (c *DataConverterImpl) ConvertToInsertNote(context context.Context, source server.NoteData) gen.InsertNoteParams {
	var sqlcInsertNoteParams gen.InsertNoteParams
	sqlcInsertNoteParams.Name = source.Name
	pString := source.Text
	sqlcInsertNoteParams.Text = &pString
	sqlcInsertNoteParams.User = converter.UserFromContext(context)
	return sqlcInsertNoteParams
}
func (c *DataConverterImpl) ConvertToLoginData(source gen.Login) server.LoginData {
	var serverLoginData server.LoginData
	serverLoginData.ID = source.ID
	serverLoginData.Name = source.Name
	serverLoginData.Login = source.Login
	if source.Password != nil {
		serverLoginData.Password = *source.Password
	}
	if source.Website != nil {
		serverLoginData.Website = *source.Website
	}
	if source.Notes != nil {
		serverLoginData.Notes = *source.Notes
	}
	return serverLoginData
}
func (c *DataConverterImpl) ConvertToLoginDataSlice(source []gen.Login) []server.LoginData {
	var serverLoginDataList []server.LoginData
	if source != nil {
		serverLoginDataList = make([]server.LoginData, len(source))
		for i := 0; i < len(source); i++ {
			serverLoginDataList[i] = c.ConvertToLoginData(source[i])
		}
	}
	return serverLoginDataList
}
func (c *DataConverterImpl) ConvertToNoteData(source gen.Note) server.NoteData {
	var serverNoteData server.NoteData
	serverNoteData.ID = source.ID
	serverNoteData.Name = source.Name
	if source.Text != nil {
		serverNoteData.Text = *source.Text
	}
	return serverNoteData
}
func (c *DataConverterImpl) ConvertToNoteDataSlice(source []gen.Note) []server.NoteData {
	var serverNoteDataList []server.NoteData
	if source != nil {
		serverNoteDataList = make([]server.NoteData, len(source))
		for i := 0; i < len(source); i++ {
			serverNoteDataList[i] = c.ConvertToNoteData(source[i])
		}
	}
	return serverNoteDataList
}
func (c *DataConverterImpl) ConvertToUpdateBinary(source gen.Binary) gen.UpdateBinaryParams {
	var sqlcUpdateBinaryParams gen.UpdateBinaryParams
	sqlcUpdateBinaryParams.Name = source.Name
	if source.Notes != nil {
		xstring := *source.Notes
		sqlcUpdateBinaryParams.Notes = &xstring
	}
	sqlcUpdateBinaryParams.ID = source.ID
	return sqlcUpdateBinaryParams
}
func (c *DataConverterImpl) ConvertToUpdateBinaryUpdate(source server.BinaryDataUpdate, target *gen.UpdateBinaryParams) {
	if source.Name != nil {
		target.Name = *source.Name
	}
	if source.Notes != nil {
		xstring := *source.Notes
		target.Notes = &xstring
	}
}
func (c *DataConverterImpl) ConvertToUpdateCard(source gen.Card) gen.UpdateCardParams {
	var sqlcUpdateCardParams gen.UpdateCardParams
	sqlcUpdateCardParams.Name = source.Name
	sqlcUpdateCardParams.Number = source.Number
	sqlcUpdateCardParams.ExpDate = source.ExpDate
	sqlcUpdateCardParams.Cvv = source.Cvv
	sqlcUpdateCardParams.Cardholder = source.Cardholder
	if source.Notes != nil {
		xstring := *source.Notes
		sqlcUpdateCardParams.Notes = &xstring
	}
	sqlcUpdateCardParams.ID = source.ID
	return sqlcUpdateCardParams
}
func (c *DataConverterImpl) ConvertToUpdateCardUpdate(source server.CardDataUpdate, target *gen.UpdateCardParams) {
	if source.Name != nil {
		target.Name = *source.Name
	}
	if source.Number != nil {
		target.Number = *source.Number
	}
	if source.ExpDate != nil {
		target.ExpDate = *source.ExpDate
	}
	if source.CVV != nil {
		target.Cvv = *source.CVV
	}
	if source.Cardholder != nil {
		target.Cardholder = *source.Cardholder
	}
	if source.Notes != nil {
		xstring := *source.Notes
		target.Notes = &xstring
	}
}
func (c *DataConverterImpl) ConvertToUpdateLogin(source gen.Login) gen.UpdateLoginParams {
	var sqlcUpdateLoginParams gen.UpdateLoginParams
	sqlcUpdateLoginParams.Name = source.Name
	sqlcUpdateLoginParams.Login = source.Login
	if source.Password != nil {
		xstring := *source.Password
		sqlcUpdateLoginParams.Password = &xstring
	}
	if source.Website != nil {
		xstring2 := *source.Website
		sqlcUpdateLoginParams.Website = &xstring2
	}
	if source.Notes != nil {
		xstring3 := *source.Notes
		sqlcUpdateLoginParams.Notes = &xstring3
	}
	sqlcUpdateLoginParams.ID = source.ID
	return sqlcUpdateLoginParams
}
func (c *DataConverterImpl) ConvertToUpdateLoginUpdate(source server.LoginDataUpdate, target *gen.UpdateLoginParams) {
	if source.Name != nil {
		target.Name = *source.Name
	}
	if source.Login != nil {
		target.Login = *source.Login
	}
	if source.Password != nil {
		xstring := *source.Password
		target.Password = &xstring
	}
	if source.Website != nil {
		xstring2 := *source.Website
		target.Website = &xstring2
	}
	if source.Notes != nil {
		xstring3 := *source.Notes
		target.Notes = &xstring3
	}
}
func (c *DataConverterImpl) ConvertToUpdateNote(source gen.Note) gen.UpdateNoteParams {
	var sqlcUpdateNoteParams gen.UpdateNoteParams
	sqlcUpdateNoteParams.Name = source.Name
	if source.Text != nil {
		xstring := *source.Text
		sqlcUpdateNoteParams.Text = &xstring
	}
	sqlcUpdateNoteParams.ID = source.ID
	return sqlcUpdateNoteParams
}
func (c *DataConverterImpl) ConvertToUpdateNoteUpdate(source server.NoteDataUpdate, target *gen.UpdateNoteParams) {
	if source.Name != nil {
		target.Name = *source.Name
	}
	if source.Text != nil {
		xstring := *source.Text
		target.Text = &xstring
	}
}

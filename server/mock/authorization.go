// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/mkolibaba/gophkeeper/server"
	"sync"
)

// Ensure, that AuthorizationServiceMock does implement server.AuthorizationService.
// If this is not the case, regenerate this file with moq.
var _ server.AuthorizationService = &AuthorizationServiceMock{}

// AuthorizationServiceMock is a mock implementation of server.AuthorizationService.
//
//	func TestSomethingThatUsesAuthorizationService(t *testing.T) {
//
//		// make and configure a mocked server.AuthorizationService
//		mockedAuthorizationService := &AuthorizationServiceMock{
//			AuthorizeFunc: func(ctx context.Context, login string) (string, error) {
//				panic("mock out the Authorize method")
//			},
//		}
//
//		// use mockedAuthorizationService in code that requires server.AuthorizationService
//		// and then make assertions.
//
//	}
type AuthorizationServiceMock struct {
	// AuthorizeFunc mocks the Authorize method.
	AuthorizeFunc func(ctx context.Context, login string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Authorize holds details about calls to the Authorize method.
		Authorize []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Login is the login argument value.
			Login string
		}
	}
	lockAuthorize sync.RWMutex
}

// Authorize calls AuthorizeFunc.
func (mock *AuthorizationServiceMock) Authorize(ctx context.Context, login string) (string, error) {
	callInfo := struct {
		Ctx   context.Context
		Login string
	}{
		Ctx:   ctx,
		Login: login,
	}
	mock.lockAuthorize.Lock()
	mock.calls.Authorize = append(mock.calls.Authorize, callInfo)
	mock.lockAuthorize.Unlock()
	if mock.AuthorizeFunc == nil {
		var (
			sOut   string
			errOut error
		)
		return sOut, errOut
	}
	return mock.AuthorizeFunc(ctx, login)
}

// AuthorizeCalls gets all the calls that were made to Authorize.
// Check the length with:
//
//	len(mockedAuthorizationService.AuthorizeCalls())
func (mock *AuthorizationServiceMock) AuthorizeCalls() []struct {
	Ctx   context.Context
	Login string
} {
	var calls []struct {
		Ctx   context.Context
		Login string
	}
	mock.lockAuthorize.RLock()
	calls = mock.calls.Authorize
	mock.lockAuthorize.RUnlock()
	return calls
}

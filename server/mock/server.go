// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mock

import (
	"context"
	"sync"

	"github.com/mkolibaba/gophkeeper/server"
)

// Ensure that AuthorizationServiceMock does implement server.AuthorizationService.
// If this is not the case, regenerate this file with mockery.
var _ server.AuthorizationService = &AuthorizationServiceMock{}

// AuthorizationServiceMock is a mock implementation of server.AuthorizationService.
//
//	func TestSomethingThatUsesAuthorizationService(t *testing.T) {
//
//		// make and configure a mocked server.AuthorizationService
//		mockedAuthorizationService := &AuthorizationServiceMock{
//			AuthorizeFunc: func(ctx context.Context, login string) (string, error) {
//				panic("mock out the Authorize method")
//			},
//		}
//
//		// use mockedAuthorizationService in code that requires server.AuthorizationService
//		// and then make assertions.
//
//	}
type AuthorizationServiceMock struct {
	// AuthorizeFunc mocks the Authorize method.
	AuthorizeFunc func(ctx context.Context, login string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Authorize holds details about calls to the Authorize method.
		Authorize []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Login is the login argument value.
			Login string
		}
	}
	lockAuthorize sync.RWMutex
}

// Authorize calls AuthorizeFunc.
func (mock *AuthorizationServiceMock) Authorize(ctx context.Context, login string) (string, error) {
	callInfo := struct {
		Ctx   context.Context
		Login string
	}{
		Ctx:   ctx,
		Login: login,
	}
	mock.lockAuthorize.Lock()
	mock.calls.Authorize = append(mock.calls.Authorize, callInfo)
	mock.lockAuthorize.Unlock()
	if mock.AuthorizeFunc == nil {
		var (
			s   string
			err error
		)
		return s, err
	}
	return mock.AuthorizeFunc(ctx, login)
}

// AuthorizeCalls gets all the calls that were made to Authorize.
// Check the length with:
//
//	len(mockedAuthorizationService.AuthorizeCalls())
func (mock *AuthorizationServiceMock) AuthorizeCalls() []struct {
	Ctx   context.Context
	Login string
} {
	var calls []struct {
		Ctx   context.Context
		Login string
	}
	mock.lockAuthorize.RLock()
	calls = mock.calls.Authorize
	mock.lockAuthorize.RUnlock()
	return calls
}

// Ensure that LoginServiceMock does implement server.LoginService.
// If this is not the case, regenerate this file with mockery.
var _ server.LoginService = &LoginServiceMock{}

// LoginServiceMock is a mock implementation of server.LoginService.
//
//	func TestSomethingThatUsesLoginService(t *testing.T) {
//
//		// make and configure a mocked server.LoginService
//		mockedLoginService := &LoginServiceMock{
//			CreateFunc: func(ctx context.Context, data server.LoginData) error {
//				panic("mock out the Create method")
//			},
//			GetAllFunc: func(ctx context.Context) ([]server.LoginData, error) {
//				panic("mock out the GetAll method")
//			},
//			RemoveFunc: func(ctx context.Context, id int64) error {
//				panic("mock out the Remove method")
//			},
//			UpdateFunc: func(ctx context.Context, id int64, data server.LoginDataUpdate) error {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedLoginService in code that requires server.LoginService
//		// and then make assertions.
//
//	}
type LoginServiceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, data server.LoginData) error

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(ctx context.Context) ([]server.LoginData, error)

	// RemoveFunc mocks the Remove method.
	RemoveFunc func(ctx context.Context, id int64) error

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, id int64, data server.LoginDataUpdate) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Data is the data argument value.
			Data server.LoginData
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Remove holds details about calls to the Remove method.
		Remove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
			// Data is the data argument value.
			Data server.LoginDataUpdate
		}
	}
	lockCreate sync.RWMutex
	lockGetAll sync.RWMutex
	lockRemove sync.RWMutex
	lockUpdate sync.RWMutex
}

// Create calls CreateFunc.
func (mock *LoginServiceMock) Create(ctx context.Context, data server.LoginData) error {
	callInfo := struct {
		Ctx  context.Context
		Data server.LoginData
	}{
		Ctx:  ctx,
		Data: data,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	if mock.CreateFunc == nil {
		var (
			err error
		)
		return err
	}
	return mock.CreateFunc(ctx, data)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedLoginService.CreateCalls())
func (mock *LoginServiceMock) CreateCalls() []struct {
	Ctx  context.Context
	Data server.LoginData
} {
	var calls []struct {
		Ctx  context.Context
		Data server.LoginData
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *LoginServiceMock) GetAll(ctx context.Context) ([]server.LoginData, error) {
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	if mock.GetAllFunc == nil {
		var (
			loginDatas []server.LoginData
			err        error
		)
		return loginDatas, err
	}
	return mock.GetAllFunc(ctx)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedLoginService.GetAllCalls())
func (mock *LoginServiceMock) GetAllCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// Remove calls RemoveFunc.
func (mock *LoginServiceMock) Remove(ctx context.Context, id int64) error {
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockRemove.Lock()
	mock.calls.Remove = append(mock.calls.Remove, callInfo)
	mock.lockRemove.Unlock()
	if mock.RemoveFunc == nil {
		var (
			err error
		)
		return err
	}
	return mock.RemoveFunc(ctx, id)
}

// RemoveCalls gets all the calls that were made to Remove.
// Check the length with:
//
//	len(mockedLoginService.RemoveCalls())
func (mock *LoginServiceMock) RemoveCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockRemove.RLock()
	calls = mock.calls.Remove
	mock.lockRemove.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *LoginServiceMock) Update(ctx context.Context, id int64, data server.LoginDataUpdate) error {
	callInfo := struct {
		Ctx  context.Context
		ID   int64
		Data server.LoginDataUpdate
	}{
		Ctx:  ctx,
		ID:   id,
		Data: data,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	if mock.UpdateFunc == nil {
		var (
			err error
		)
		return err
	}
	return mock.UpdateFunc(ctx, id, data)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedLoginService.UpdateCalls())
func (mock *LoginServiceMock) UpdateCalls() []struct {
	Ctx  context.Context
	ID   int64
	Data server.LoginDataUpdate
} {
	var calls []struct {
		Ctx  context.Context
		ID   int64
		Data server.LoginDataUpdate
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}

// Ensure that NoteServiceMock does implement server.NoteService.
// If this is not the case, regenerate this file with mockery.
var _ server.NoteService = &NoteServiceMock{}

// NoteServiceMock is a mock implementation of server.NoteService.
//
//	func TestSomethingThatUsesNoteService(t *testing.T) {
//
//		// make and configure a mocked server.NoteService
//		mockedNoteService := &NoteServiceMock{
//			CreateFunc: func(ctx context.Context, data server.NoteData) error {
//				panic("mock out the Create method")
//			},
//			GetAllFunc: func(ctx context.Context) ([]server.NoteData, error) {
//				panic("mock out the GetAll method")
//			},
//			RemoveFunc: func(ctx context.Context, id int64) error {
//				panic("mock out the Remove method")
//			},
//			UpdateFunc: func(ctx context.Context, id int64, data server.NoteDataUpdate) error {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedNoteService in code that requires server.NoteService
//		// and then make assertions.
//
//	}
type NoteServiceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, data server.NoteData) error

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(ctx context.Context) ([]server.NoteData, error)

	// RemoveFunc mocks the Remove method.
	RemoveFunc func(ctx context.Context, id int64) error

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, id int64, data server.NoteDataUpdate) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Data is the data argument value.
			Data server.NoteData
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Remove holds details about calls to the Remove method.
		Remove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
			// Data is the data argument value.
			Data server.NoteDataUpdate
		}
	}
	lockCreate sync.RWMutex
	lockGetAll sync.RWMutex
	lockRemove sync.RWMutex
	lockUpdate sync.RWMutex
}

// Create calls CreateFunc.
func (mock *NoteServiceMock) Create(ctx context.Context, data server.NoteData) error {
	callInfo := struct {
		Ctx  context.Context
		Data server.NoteData
	}{
		Ctx:  ctx,
		Data: data,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	if mock.CreateFunc == nil {
		var (
			err error
		)
		return err
	}
	return mock.CreateFunc(ctx, data)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedNoteService.CreateCalls())
func (mock *NoteServiceMock) CreateCalls() []struct {
	Ctx  context.Context
	Data server.NoteData
} {
	var calls []struct {
		Ctx  context.Context
		Data server.NoteData
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *NoteServiceMock) GetAll(ctx context.Context) ([]server.NoteData, error) {
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	if mock.GetAllFunc == nil {
		var (
			noteDatas []server.NoteData
			err       error
		)
		return noteDatas, err
	}
	return mock.GetAllFunc(ctx)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedNoteService.GetAllCalls())
func (mock *NoteServiceMock) GetAllCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// Remove calls RemoveFunc.
func (mock *NoteServiceMock) Remove(ctx context.Context, id int64) error {
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockRemove.Lock()
	mock.calls.Remove = append(mock.calls.Remove, callInfo)
	mock.lockRemove.Unlock()
	if mock.RemoveFunc == nil {
		var (
			err error
		)
		return err
	}
	return mock.RemoveFunc(ctx, id)
}

// RemoveCalls gets all the calls that were made to Remove.
// Check the length with:
//
//	len(mockedNoteService.RemoveCalls())
func (mock *NoteServiceMock) RemoveCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockRemove.RLock()
	calls = mock.calls.Remove
	mock.lockRemove.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *NoteServiceMock) Update(ctx context.Context, id int64, data server.NoteDataUpdate) error {
	callInfo := struct {
		Ctx  context.Context
		ID   int64
		Data server.NoteDataUpdate
	}{
		Ctx:  ctx,
		ID:   id,
		Data: data,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	if mock.UpdateFunc == nil {
		var (
			err error
		)
		return err
	}
	return mock.UpdateFunc(ctx, id, data)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedNoteService.UpdateCalls())
func (mock *NoteServiceMock) UpdateCalls() []struct {
	Ctx  context.Context
	ID   int64
	Data server.NoteDataUpdate
} {
	var calls []struct {
		Ctx  context.Context
		ID   int64
		Data server.NoteDataUpdate
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}

// Ensure that BinaryServiceMock does implement server.BinaryService.
// If this is not the case, regenerate this file with mockery.
var _ server.BinaryService = &BinaryServiceMock{}

// BinaryServiceMock is a mock implementation of server.BinaryService.
//
//	func TestSomethingThatUsesBinaryService(t *testing.T) {
//
//		// make and configure a mocked server.BinaryService
//		mockedBinaryService := &BinaryServiceMock{
//			CreateFunc: func(ctx context.Context, data server.ReadableBinaryData) error {
//				panic("mock out the Create method")
//			},
//			GetFunc: func(ctx context.Context, id int64) (*server.ReadableBinaryData, error) {
//				panic("mock out the Get method")
//			},
//			GetAllFunc: func(ctx context.Context) ([]server.BinaryData, error) {
//				panic("mock out the GetAll method")
//			},
//			RemoveFunc: func(ctx context.Context, id int64) error {
//				panic("mock out the Remove method")
//			},
//			UpdateFunc: func(ctx context.Context, id int64, data server.BinaryDataUpdate) error {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedBinaryService in code that requires server.BinaryService
//		// and then make assertions.
//
//	}
type BinaryServiceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, data server.ReadableBinaryData) error

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, id int64) (*server.ReadableBinaryData, error)

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(ctx context.Context) ([]server.BinaryData, error)

	// RemoveFunc mocks the Remove method.
	RemoveFunc func(ctx context.Context, id int64) error

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, id int64, data server.BinaryDataUpdate) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Data is the data argument value.
			Data server.ReadableBinaryData
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Remove holds details about calls to the Remove method.
		Remove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
			// Data is the data argument value.
			Data server.BinaryDataUpdate
		}
	}
	lockCreate sync.RWMutex
	lockGet    sync.RWMutex
	lockGetAll sync.RWMutex
	lockRemove sync.RWMutex
	lockUpdate sync.RWMutex
}

// Create calls CreateFunc.
func (mock *BinaryServiceMock) Create(ctx context.Context, data server.ReadableBinaryData) error {
	callInfo := struct {
		Ctx  context.Context
		Data server.ReadableBinaryData
	}{
		Ctx:  ctx,
		Data: data,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	if mock.CreateFunc == nil {
		var (
			err error
		)
		return err
	}
	return mock.CreateFunc(ctx, data)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedBinaryService.CreateCalls())
func (mock *BinaryServiceMock) CreateCalls() []struct {
	Ctx  context.Context
	Data server.ReadableBinaryData
} {
	var calls []struct {
		Ctx  context.Context
		Data server.ReadableBinaryData
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *BinaryServiceMock) Get(ctx context.Context, id int64) (*server.ReadableBinaryData, error) {
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	if mock.GetFunc == nil {
		var (
			readableBinaryData *server.ReadableBinaryData
			err                error
		)
		return readableBinaryData, err
	}
	return mock.GetFunc(ctx, id)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedBinaryService.GetCalls())
func (mock *BinaryServiceMock) GetCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *BinaryServiceMock) GetAll(ctx context.Context) ([]server.BinaryData, error) {
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	if mock.GetAllFunc == nil {
		var (
			binaryDatas []server.BinaryData
			err         error
		)
		return binaryDatas, err
	}
	return mock.GetAllFunc(ctx)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedBinaryService.GetAllCalls())
func (mock *BinaryServiceMock) GetAllCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// Remove calls RemoveFunc.
func (mock *BinaryServiceMock) Remove(ctx context.Context, id int64) error {
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockRemove.Lock()
	mock.calls.Remove = append(mock.calls.Remove, callInfo)
	mock.lockRemove.Unlock()
	if mock.RemoveFunc == nil {
		var (
			err error
		)
		return err
	}
	return mock.RemoveFunc(ctx, id)
}

// RemoveCalls gets all the calls that were made to Remove.
// Check the length with:
//
//	len(mockedBinaryService.RemoveCalls())
func (mock *BinaryServiceMock) RemoveCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockRemove.RLock()
	calls = mock.calls.Remove
	mock.lockRemove.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *BinaryServiceMock) Update(ctx context.Context, id int64, data server.BinaryDataUpdate) error {
	callInfo := struct {
		Ctx  context.Context
		ID   int64
		Data server.BinaryDataUpdate
	}{
		Ctx:  ctx,
		ID:   id,
		Data: data,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	if mock.UpdateFunc == nil {
		var (
			err error
		)
		return err
	}
	return mock.UpdateFunc(ctx, id, data)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedBinaryService.UpdateCalls())
func (mock *BinaryServiceMock) UpdateCalls() []struct {
	Ctx  context.Context
	ID   int64
	Data server.BinaryDataUpdate
} {
	var calls []struct {
		Ctx  context.Context
		ID   int64
		Data server.BinaryDataUpdate
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}

// Ensure that CardServiceMock does implement server.CardService.
// If this is not the case, regenerate this file with mockery.
var _ server.CardService = &CardServiceMock{}

// CardServiceMock is a mock implementation of server.CardService.
//
//	func TestSomethingThatUsesCardService(t *testing.T) {
//
//		// make and configure a mocked server.CardService
//		mockedCardService := &CardServiceMock{
//			CreateFunc: func(ctx context.Context, data server.CardData) error {
//				panic("mock out the Create method")
//			},
//			GetAllFunc: func(ctx context.Context) ([]server.CardData, error) {
//				panic("mock out the GetAll method")
//			},
//			RemoveFunc: func(ctx context.Context, id int64) error {
//				panic("mock out the Remove method")
//			},
//			UpdateFunc: func(ctx context.Context, id int64, data server.CardDataUpdate) error {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedCardService in code that requires server.CardService
//		// and then make assertions.
//
//	}
type CardServiceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, data server.CardData) error

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(ctx context.Context) ([]server.CardData, error)

	// RemoveFunc mocks the Remove method.
	RemoveFunc func(ctx context.Context, id int64) error

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, id int64, data server.CardDataUpdate) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Data is the data argument value.
			Data server.CardData
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Remove holds details about calls to the Remove method.
		Remove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
			// Data is the data argument value.
			Data server.CardDataUpdate
		}
	}
	lockCreate sync.RWMutex
	lockGetAll sync.RWMutex
	lockRemove sync.RWMutex
	lockUpdate sync.RWMutex
}

// Create calls CreateFunc.
func (mock *CardServiceMock) Create(ctx context.Context, data server.CardData) error {
	callInfo := struct {
		Ctx  context.Context
		Data server.CardData
	}{
		Ctx:  ctx,
		Data: data,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	if mock.CreateFunc == nil {
		var (
			err error
		)
		return err
	}
	return mock.CreateFunc(ctx, data)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedCardService.CreateCalls())
func (mock *CardServiceMock) CreateCalls() []struct {
	Ctx  context.Context
	Data server.CardData
} {
	var calls []struct {
		Ctx  context.Context
		Data server.CardData
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *CardServiceMock) GetAll(ctx context.Context) ([]server.CardData, error) {
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	if mock.GetAllFunc == nil {
		var (
			cardDatas []server.CardData
			err       error
		)
		return cardDatas, err
	}
	return mock.GetAllFunc(ctx)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedCardService.GetAllCalls())
func (mock *CardServiceMock) GetAllCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// Remove calls RemoveFunc.
func (mock *CardServiceMock) Remove(ctx context.Context, id int64) error {
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockRemove.Lock()
	mock.calls.Remove = append(mock.calls.Remove, callInfo)
	mock.lockRemove.Unlock()
	if mock.RemoveFunc == nil {
		var (
			err error
		)
		return err
	}
	return mock.RemoveFunc(ctx, id)
}

// RemoveCalls gets all the calls that were made to Remove.
// Check the length with:
//
//	len(mockedCardService.RemoveCalls())
func (mock *CardServiceMock) RemoveCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockRemove.RLock()
	calls = mock.calls.Remove
	mock.lockRemove.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *CardServiceMock) Update(ctx context.Context, id int64, data server.CardDataUpdate) error {
	callInfo := struct {
		Ctx  context.Context
		ID   int64
		Data server.CardDataUpdate
	}{
		Ctx:  ctx,
		ID:   id,
		Data: data,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	if mock.UpdateFunc == nil {
		var (
			err error
		)
		return err
	}
	return mock.UpdateFunc(ctx, id, data)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedCardService.UpdateCalls())
func (mock *CardServiceMock) UpdateCalls() []struct {
	Ctx  context.Context
	ID   int64
	Data server.CardDataUpdate
} {
	var calls []struct {
		Ctx  context.Context
		ID   int64
		Data server.CardDataUpdate
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}

// Ensure that UserServiceMock does implement server.UserService.
// If this is not the case, regenerate this file with mockery.
var _ server.UserService = &UserServiceMock{}

// UserServiceMock is a mock implementation of server.UserService.
//
//	func TestSomethingThatUsesUserService(t *testing.T) {
//
//		// make and configure a mocked server.UserService
//		mockedUserService := &UserServiceMock{
//			GetFunc: func(ctx context.Context, login string) (*server.User, error) {
//				panic("mock out the Get method")
//			},
//			SaveFunc: func(ctx context.Context, user server.User) error {
//				panic("mock out the Save method")
//			},
//		}
//
//		// use mockedUserService in code that requires server.UserService
//		// and then make assertions.
//
//	}
type UserServiceMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, login string) (*server.User, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, user server.User) error

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Login is the login argument value.
			Login string
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// User is the user argument value.
			User server.User
		}
	}
	lockGet  sync.RWMutex
	lockSave sync.RWMutex
}

// Get calls GetFunc.
func (mock *UserServiceMock) Get(ctx context.Context, login string) (*server.User, error) {
	callInfo := struct {
		Ctx   context.Context
		Login string
	}{
		Ctx:   ctx,
		Login: login,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	if mock.GetFunc == nil {
		var (
			user *server.User
			err  error
		)
		return user, err
	}
	return mock.GetFunc(ctx, login)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedUserService.GetCalls())
func (mock *UserServiceMock) GetCalls() []struct {
	Ctx   context.Context
	Login string
} {
	var calls []struct {
		Ctx   context.Context
		Login string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *UserServiceMock) Save(ctx context.Context, user server.User) error {
	callInfo := struct {
		Ctx  context.Context
		User server.User
	}{
		Ctx:  ctx,
		User: user,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	if mock.SaveFunc == nil {
		var (
			err error
		)
		return err
	}
	return mock.SaveFunc(ctx, user)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//
//	len(mockedUserService.SaveCalls())
func (mock *UserServiceMock) SaveCalls() []struct {
	Ctx  context.Context
	User server.User
} {
	var calls []struct {
		Ctx  context.Context
		User server.User
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}

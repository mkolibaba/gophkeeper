// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/mkolibaba/gophkeeper/server"
	"sync"
)

// Ensure, that UserServiceMock does implement server.UserService.
// If this is not the case, regenerate this file with moq.
var _ server.UserService = &UserServiceMock{}

// UserServiceMock is a mock implementation of server.UserService.
//
//	func TestSomethingThatUsesUserService(t *testing.T) {
//
//		// make and configure a mocked server.UserService
//		mockedUserService := &UserServiceMock{
//			GetFunc: func(ctx context.Context, login string) (*server.User, error) {
//				panic("mock out the Get method")
//			},
//			SaveFunc: func(ctx context.Context, user server.User) error {
//				panic("mock out the Save method")
//			},
//		}
//
//		// use mockedUserService in code that requires server.UserService
//		// and then make assertions.
//
//	}
type UserServiceMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, login string) (*server.User, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, user server.User) error

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Login is the login argument value.
			Login string
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// User is the user argument value.
			User server.User
		}
	}
	lockGet  sync.RWMutex
	lockSave sync.RWMutex
}

// Get calls GetFunc.
func (mock *UserServiceMock) Get(ctx context.Context, login string) (*server.User, error) {
	callInfo := struct {
		Ctx   context.Context
		Login string
	}{
		Ctx:   ctx,
		Login: login,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	if mock.GetFunc == nil {
		var (
			userOut *server.User
			errOut  error
		)
		return userOut, errOut
	}
	return mock.GetFunc(ctx, login)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//
//	len(mockedUserService.GetCalls())
func (mock *UserServiceMock) GetCalls() []struct {
	Ctx   context.Context
	Login string
} {
	var calls []struct {
		Ctx   context.Context
		Login string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *UserServiceMock) Save(ctx context.Context, user server.User) error {
	callInfo := struct {
		Ctx  context.Context
		User server.User
	}{
		Ctx:  ctx,
		User: user,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	if mock.SaveFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.SaveFunc(ctx, user)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//
//	len(mockedUserService.SaveCalls())
func (mock *UserServiceMock) SaveCalls() []struct {
	Ctx  context.Context
	User server.User
} {
	var calls []struct {
		Ctx  context.Context
		User server.User
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}

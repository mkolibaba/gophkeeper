// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/mkolibaba/gophkeeper/server"
	"sync"
)

// Ensure, that LoginServiceMock does implement server.LoginService.
// If this is not the case, regenerate this file with moq.
var _ server.LoginService = &LoginServiceMock{}

// LoginServiceMock is a mock implementation of server.LoginService.
//
//	func TestSomethingThatUsesLoginService(t *testing.T) {
//
//		// make and configure a mocked server.LoginService
//		mockedLoginService := &LoginServiceMock{
//			CreateFunc: func(ctx context.Context, data server.LoginData) error {
//				panic("mock out the Create method")
//			},
//			GetAllFunc: func(ctx context.Context) ([]server.LoginData, error) {
//				panic("mock out the GetAll method")
//			},
//			RemoveFunc: func(ctx context.Context, id int64) error {
//				panic("mock out the Remove method")
//			},
//			UpdateFunc: func(ctx context.Context, id int64, data server.LoginDataUpdate) error {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedLoginService in code that requires server.LoginService
//		// and then make assertions.
//
//	}
type LoginServiceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, data server.LoginData) error

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(ctx context.Context) ([]server.LoginData, error)

	// RemoveFunc mocks the Remove method.
	RemoveFunc func(ctx context.Context, id int64) error

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, id int64, data server.LoginDataUpdate) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Data is the data argument value.
			Data server.LoginData
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Remove holds details about calls to the Remove method.
		Remove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
			// Data is the data argument value.
			Data server.LoginDataUpdate
		}
	}
	lockCreate sync.RWMutex
	lockGetAll sync.RWMutex
	lockRemove sync.RWMutex
	lockUpdate sync.RWMutex
}

// Create calls CreateFunc.
func (mock *LoginServiceMock) Create(ctx context.Context, data server.LoginData) error {
	callInfo := struct {
		Ctx  context.Context
		Data server.LoginData
	}{
		Ctx:  ctx,
		Data: data,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	if mock.CreateFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.CreateFunc(ctx, data)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedLoginService.CreateCalls())
func (mock *LoginServiceMock) CreateCalls() []struct {
	Ctx  context.Context
	Data server.LoginData
} {
	var calls []struct {
		Ctx  context.Context
		Data server.LoginData
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *LoginServiceMock) GetAll(ctx context.Context) ([]server.LoginData, error) {
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	if mock.GetAllFunc == nil {
		var (
			loginDatasOut []server.LoginData
			errOut        error
		)
		return loginDatasOut, errOut
	}
	return mock.GetAllFunc(ctx)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedLoginService.GetAllCalls())
func (mock *LoginServiceMock) GetAllCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// Remove calls RemoveFunc.
func (mock *LoginServiceMock) Remove(ctx context.Context, id int64) error {
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockRemove.Lock()
	mock.calls.Remove = append(mock.calls.Remove, callInfo)
	mock.lockRemove.Unlock()
	if mock.RemoveFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.RemoveFunc(ctx, id)
}

// RemoveCalls gets all the calls that were made to Remove.
// Check the length with:
//
//	len(mockedLoginService.RemoveCalls())
func (mock *LoginServiceMock) RemoveCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockRemove.RLock()
	calls = mock.calls.Remove
	mock.lockRemove.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *LoginServiceMock) Update(ctx context.Context, id int64, data server.LoginDataUpdate) error {
	callInfo := struct {
		Ctx  context.Context
		ID   int64
		Data server.LoginDataUpdate
	}{
		Ctx:  ctx,
		ID:   id,
		Data: data,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	if mock.UpdateFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdateFunc(ctx, id, data)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedLoginService.UpdateCalls())
func (mock *LoginServiceMock) UpdateCalls() []struct {
	Ctx  context.Context
	ID   int64
	Data server.LoginDataUpdate
} {
	var calls []struct {
		Ctx  context.Context
		ID   int64
		Data server.LoginDataUpdate
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}

// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/mkolibaba/gophkeeper/client"
	"sync"
)

// Ensure, that AuthorizationServiceMock does implement client.AuthorizationService.
// If this is not the case, regenerate this file with moq.
var _ client.AuthorizationService = &AuthorizationServiceMock{}

// AuthorizationServiceMock is a mock implementation of client.AuthorizationService.
//
//	func TestSomethingThatUsesAuthorizationService(t *testing.T) {
//
//		// make and configure a mocked client.AuthorizationService
//		mockedAuthorizationService := &AuthorizationServiceMock{
//			AuthorizeFunc: func(ctx context.Context, login string, password string) (string, error) {
//				panic("mock out the Authorize method")
//			},
//			RegisterFunc: func(ctx context.Context, login string, password string) (string, error) {
//				panic("mock out the Register method")
//			},
//		}
//
//		// use mockedAuthorizationService in code that requires client.AuthorizationService
//		// and then make assertions.
//
//	}
type AuthorizationServiceMock struct {
	// AuthorizeFunc mocks the Authorize method.
	AuthorizeFunc func(ctx context.Context, login string, password string) (string, error)

	// RegisterFunc mocks the Register method.
	RegisterFunc func(ctx context.Context, login string, password string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Authorize holds details about calls to the Authorize method.
		Authorize []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Login is the login argument value.
			Login string
			// Password is the password argument value.
			Password string
		}
		// Register holds details about calls to the Register method.
		Register []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Login is the login argument value.
			Login string
			// Password is the password argument value.
			Password string
		}
	}
	lockAuthorize sync.RWMutex
	lockRegister  sync.RWMutex
}

// Authorize calls AuthorizeFunc.
func (mock *AuthorizationServiceMock) Authorize(ctx context.Context, login string, password string) (string, error) {
	callInfo := struct {
		Ctx      context.Context
		Login    string
		Password string
	}{
		Ctx:      ctx,
		Login:    login,
		Password: password,
	}
	mock.lockAuthorize.Lock()
	mock.calls.Authorize = append(mock.calls.Authorize, callInfo)
	mock.lockAuthorize.Unlock()
	if mock.AuthorizeFunc == nil {
		var (
			sOut   string
			errOut error
		)
		return sOut, errOut
	}
	return mock.AuthorizeFunc(ctx, login, password)
}

// AuthorizeCalls gets all the calls that were made to Authorize.
// Check the length with:
//
//	len(mockedAuthorizationService.AuthorizeCalls())
func (mock *AuthorizationServiceMock) AuthorizeCalls() []struct {
	Ctx      context.Context
	Login    string
	Password string
} {
	var calls []struct {
		Ctx      context.Context
		Login    string
		Password string
	}
	mock.lockAuthorize.RLock()
	calls = mock.calls.Authorize
	mock.lockAuthorize.RUnlock()
	return calls
}

// Register calls RegisterFunc.
func (mock *AuthorizationServiceMock) Register(ctx context.Context, login string, password string) (string, error) {
	callInfo := struct {
		Ctx      context.Context
		Login    string
		Password string
	}{
		Ctx:      ctx,
		Login:    login,
		Password: password,
	}
	mock.lockRegister.Lock()
	mock.calls.Register = append(mock.calls.Register, callInfo)
	mock.lockRegister.Unlock()
	if mock.RegisterFunc == nil {
		var (
			sOut   string
			errOut error
		)
		return sOut, errOut
	}
	return mock.RegisterFunc(ctx, login, password)
}

// RegisterCalls gets all the calls that were made to Register.
// Check the length with:
//
//	len(mockedAuthorizationService.RegisterCalls())
func (mock *AuthorizationServiceMock) RegisterCalls() []struct {
	Ctx      context.Context
	Login    string
	Password string
} {
	var calls []struct {
		Ctx      context.Context
		Login    string
		Password string
	}
	mock.lockRegister.RLock()
	calls = mock.calls.Register
	mock.lockRegister.RUnlock()
	return calls
}

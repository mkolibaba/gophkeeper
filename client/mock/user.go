// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/mkolibaba/gophkeeper/client"
	"sync"
)

// Ensure, that UserServiceMock does implement client.UserService.
// If this is not the case, regenerate this file with moq.
var _ client.UserService = &UserServiceMock{}

// UserServiceMock is a mock implementation of client.UserService.
//
//	func TestSomethingThatUsesUserService(t *testing.T) {
//
//		// make and configure a mocked client.UserService
//		mockedUserService := &UserServiceMock{
//			GetBearerTokenFunc: func() string {
//				panic("mock out the GetBearerToken method")
//			},
//			GetUserLoginFunc: func() string {
//				panic("mock out the GetUserLogin method")
//			},
//			SetInfoFunc: func(login string, token string)  {
//				panic("mock out the SetInfo method")
//			},
//		}
//
//		// use mockedUserService in code that requires client.UserService
//		// and then make assertions.
//
//	}
type UserServiceMock struct {
	// GetBearerTokenFunc mocks the GetBearerToken method.
	GetBearerTokenFunc func() string

	// GetUserLoginFunc mocks the GetUserLogin method.
	GetUserLoginFunc func() string

	// SetInfoFunc mocks the SetInfo method.
	SetInfoFunc func(login string, token string)

	// calls tracks calls to the methods.
	calls struct {
		// GetBearerToken holds details about calls to the GetBearerToken method.
		GetBearerToken []struct {
		}
		// GetUserLogin holds details about calls to the GetUserLogin method.
		GetUserLogin []struct {
		}
		// SetInfo holds details about calls to the SetInfo method.
		SetInfo []struct {
			// Login is the login argument value.
			Login string
			// Token is the token argument value.
			Token string
		}
	}
	lockGetBearerToken sync.RWMutex
	lockGetUserLogin   sync.RWMutex
	lockSetInfo        sync.RWMutex
}

// GetBearerToken calls GetBearerTokenFunc.
func (mock *UserServiceMock) GetBearerToken() string {
	callInfo := struct {
	}{}
	mock.lockGetBearerToken.Lock()
	mock.calls.GetBearerToken = append(mock.calls.GetBearerToken, callInfo)
	mock.lockGetBearerToken.Unlock()
	if mock.GetBearerTokenFunc == nil {
		var (
			sOut string
		)
		return sOut
	}
	return mock.GetBearerTokenFunc()
}

// GetBearerTokenCalls gets all the calls that were made to GetBearerToken.
// Check the length with:
//
//	len(mockedUserService.GetBearerTokenCalls())
func (mock *UserServiceMock) GetBearerTokenCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetBearerToken.RLock()
	calls = mock.calls.GetBearerToken
	mock.lockGetBearerToken.RUnlock()
	return calls
}

// GetUserLogin calls GetUserLoginFunc.
func (mock *UserServiceMock) GetUserLogin() string {
	callInfo := struct {
	}{}
	mock.lockGetUserLogin.Lock()
	mock.calls.GetUserLogin = append(mock.calls.GetUserLogin, callInfo)
	mock.lockGetUserLogin.Unlock()
	if mock.GetUserLoginFunc == nil {
		var (
			sOut string
		)
		return sOut
	}
	return mock.GetUserLoginFunc()
}

// GetUserLoginCalls gets all the calls that were made to GetUserLogin.
// Check the length with:
//
//	len(mockedUserService.GetUserLoginCalls())
func (mock *UserServiceMock) GetUserLoginCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetUserLogin.RLock()
	calls = mock.calls.GetUserLogin
	mock.lockGetUserLogin.RUnlock()
	return calls
}

// SetInfo calls SetInfoFunc.
func (mock *UserServiceMock) SetInfo(login string, token string) {
	callInfo := struct {
		Login string
		Token string
	}{
		Login: login,
		Token: token,
	}
	mock.lockSetInfo.Lock()
	mock.calls.SetInfo = append(mock.calls.SetInfo, callInfo)
	mock.lockSetInfo.Unlock()
	if mock.SetInfoFunc == nil {
		return
	}
	mock.SetInfoFunc(login, token)
}

// SetInfoCalls gets all the calls that were made to SetInfo.
// Check the length with:
//
//	len(mockedUserService.SetInfoCalls())
func (mock *UserServiceMock) SetInfoCalls() []struct {
	Login string
	Token string
} {
	var calls []struct {
		Login string
		Token string
	}
	mock.lockSetInfo.RLock()
	calls = mock.calls.SetInfo
	mock.lockSetInfo.RUnlock()
	return calls
}

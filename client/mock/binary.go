// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/mkolibaba/gophkeeper/client"
	"sync"
)

// Ensure, that BinaryServiceMock does implement client.BinaryService.
// If this is not the case, regenerate this file with moq.
var _ client.BinaryService = &BinaryServiceMock{}

// BinaryServiceMock is a mock implementation of client.BinaryService.
//
//	func TestSomethingThatUsesBinaryService(t *testing.T) {
//
//		// make and configure a mocked client.BinaryService
//		mockedBinaryService := &BinaryServiceMock{
//			DownloadFunc: func(ctx context.Context, id int64) error {
//				panic("mock out the Download method")
//			},
//			GetAllFunc: func(ctx context.Context) ([]client.BinaryData, error) {
//				panic("mock out the GetAll method")
//			},
//			RemoveFunc: func(ctx context.Context, id int64) error {
//				panic("mock out the Remove method")
//			},
//			SaveFunc: func(ctx context.Context, data client.BinaryData) error {
//				panic("mock out the Save method")
//			},
//			UpdateFunc: func(ctx context.Context, data client.BinaryDataUpdate) error {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedBinaryService in code that requires client.BinaryService
//		// and then make assertions.
//
//	}
type BinaryServiceMock struct {
	// DownloadFunc mocks the Download method.
	DownloadFunc func(ctx context.Context, id int64) error

	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(ctx context.Context) ([]client.BinaryData, error)

	// RemoveFunc mocks the Remove method.
	RemoveFunc func(ctx context.Context, id int64) error

	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, data client.BinaryData) error

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, data client.BinaryDataUpdate) error

	// calls tracks calls to the methods.
	calls struct {
		// Download holds details about calls to the Download method.
		Download []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Remove holds details about calls to the Remove method.
		Remove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID int64
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Data is the data argument value.
			Data client.BinaryData
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Data is the data argument value.
			Data client.BinaryDataUpdate
		}
	}
	lockDownload sync.RWMutex
	lockGetAll   sync.RWMutex
	lockRemove   sync.RWMutex
	lockSave     sync.RWMutex
	lockUpdate   sync.RWMutex
}

// Download calls DownloadFunc.
func (mock *BinaryServiceMock) Download(ctx context.Context, id int64) error {
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockDownload.Lock()
	mock.calls.Download = append(mock.calls.Download, callInfo)
	mock.lockDownload.Unlock()
	if mock.DownloadFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.DownloadFunc(ctx, id)
}

// DownloadCalls gets all the calls that were made to Download.
// Check the length with:
//
//	len(mockedBinaryService.DownloadCalls())
func (mock *BinaryServiceMock) DownloadCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockDownload.RLock()
	calls = mock.calls.Download
	mock.lockDownload.RUnlock()
	return calls
}

// GetAll calls GetAllFunc.
func (mock *BinaryServiceMock) GetAll(ctx context.Context) ([]client.BinaryData, error) {
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	if mock.GetAllFunc == nil {
		var (
			binaryDatasOut []client.BinaryData
			errOut         error
		)
		return binaryDatasOut, errOut
	}
	return mock.GetAllFunc(ctx)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedBinaryService.GetAllCalls())
func (mock *BinaryServiceMock) GetAllCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// Remove calls RemoveFunc.
func (mock *BinaryServiceMock) Remove(ctx context.Context, id int64) error {
	callInfo := struct {
		Ctx context.Context
		ID  int64
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockRemove.Lock()
	mock.calls.Remove = append(mock.calls.Remove, callInfo)
	mock.lockRemove.Unlock()
	if mock.RemoveFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.RemoveFunc(ctx, id)
}

// RemoveCalls gets all the calls that were made to Remove.
// Check the length with:
//
//	len(mockedBinaryService.RemoveCalls())
func (mock *BinaryServiceMock) RemoveCalls() []struct {
	Ctx context.Context
	ID  int64
} {
	var calls []struct {
		Ctx context.Context
		ID  int64
	}
	mock.lockRemove.RLock()
	calls = mock.calls.Remove
	mock.lockRemove.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *BinaryServiceMock) Save(ctx context.Context, data client.BinaryData) error {
	callInfo := struct {
		Ctx  context.Context
		Data client.BinaryData
	}{
		Ctx:  ctx,
		Data: data,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	if mock.SaveFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.SaveFunc(ctx, data)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//
//	len(mockedBinaryService.SaveCalls())
func (mock *BinaryServiceMock) SaveCalls() []struct {
	Ctx  context.Context
	Data client.BinaryData
} {
	var calls []struct {
		Ctx  context.Context
		Data client.BinaryData
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *BinaryServiceMock) Update(ctx context.Context, data client.BinaryDataUpdate) error {
	callInfo := struct {
		Ctx  context.Context
		Data client.BinaryDataUpdate
	}{
		Ctx:  ctx,
		Data: data,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	if mock.UpdateFunc == nil {
		var (
			errOut error
		)
		return errOut
	}
	return mock.UpdateFunc(ctx, data)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedBinaryService.UpdateCalls())
func (mock *BinaryServiceMock) UpdateCalls() []struct {
	Ctx  context.Context
	Data client.BinaryDataUpdate
} {
	var calls []struct {
		Ctx  context.Context
		Data client.BinaryDataUpdate
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}

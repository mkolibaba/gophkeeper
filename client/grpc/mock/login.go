// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/golang/protobuf/ptypes/empty"
	"github.com/mkolibaba/gophkeeper/proto/gen/go/gophkeeperv1"
	"google.golang.org/grpc"
	"sync"
)

// Ensure, that LoginServiceClientForMockingMock does implement LoginServiceClientForMocking.
// If this is not the case, regenerate this file with moq.
var _ LoginServiceClientForMocking = &LoginServiceClientForMockingMock{}

// LoginServiceClientForMockingMock is a mock implementation of LoginServiceClientForMocking.
//
//	func TestSomethingThatUsesLoginServiceClientForMocking(t *testing.T) {
//
//		// make and configure a mocked LoginServiceClientForMocking
//		mockedLoginServiceClientForMocking := &LoginServiceClientForMockingMock{
//			GetAllFunc: func(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*gophkeeperv1.GetAllLoginsResponse, error) {
//				panic("mock out the GetAll method")
//			},
//			RemoveFunc: func(ctx context.Context, in *gophkeeperv1.RemoveDataRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
//				panic("mock out the Remove method")
//			},
//			SaveFunc: func(ctx context.Context, in *gophkeeperv1.Login, opts ...grpc.CallOption) (*empty.Empty, error) {
//				panic("mock out the Save method")
//			},
//			UpdateFunc: func(ctx context.Context, in *gophkeeperv1.Login, opts ...grpc.CallOption) (*empty.Empty, error) {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedLoginServiceClientForMocking in code that requires LoginServiceClientForMocking
//		// and then make assertions.
//
//	}
type LoginServiceClientForMockingMock struct {
	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*gophkeeperv1.GetAllLoginsResponse, error)

	// RemoveFunc mocks the Remove method.
	RemoveFunc func(ctx context.Context, in *gophkeeperv1.RemoveDataRequest, opts ...grpc.CallOption) (*empty.Empty, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, in *gophkeeperv1.Login, opts ...grpc.CallOption) (*empty.Empty, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, in *gophkeeperv1.Login, opts ...grpc.CallOption) (*empty.Empty, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *empty.Empty
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// Remove holds details about calls to the Remove method.
		Remove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *gophkeeperv1.RemoveDataRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *gophkeeperv1.Login
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *gophkeeperv1.Login
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
	}
	lockGetAll sync.RWMutex
	lockRemove sync.RWMutex
	lockSave   sync.RWMutex
	lockUpdate sync.RWMutex
}

// GetAll calls GetAllFunc.
func (mock *LoginServiceClientForMockingMock) GetAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*gophkeeperv1.GetAllLoginsResponse, error) {
	callInfo := struct {
		Ctx  context.Context
		In   *empty.Empty
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	if mock.GetAllFunc == nil {
		var (
			getAllLoginsResponseOut *gophkeeperv1.GetAllLoginsResponse
			errOut                  error
		)
		return getAllLoginsResponseOut, errOut
	}
	return mock.GetAllFunc(ctx, in, opts...)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedLoginServiceClientForMocking.GetAllCalls())
func (mock *LoginServiceClientForMockingMock) GetAllCalls() []struct {
	Ctx  context.Context
	In   *empty.Empty
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *empty.Empty
		Opts []grpc.CallOption
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// Remove calls RemoveFunc.
func (mock *LoginServiceClientForMockingMock) Remove(ctx context.Context, in *gophkeeperv1.RemoveDataRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	callInfo := struct {
		Ctx  context.Context
		In   *gophkeeperv1.RemoveDataRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockRemove.Lock()
	mock.calls.Remove = append(mock.calls.Remove, callInfo)
	mock.lockRemove.Unlock()
	if mock.RemoveFunc == nil {
		var (
			vOut   *empty.Empty
			errOut error
		)
		return vOut, errOut
	}
	return mock.RemoveFunc(ctx, in, opts...)
}

// RemoveCalls gets all the calls that were made to Remove.
// Check the length with:
//
//	len(mockedLoginServiceClientForMocking.RemoveCalls())
func (mock *LoginServiceClientForMockingMock) RemoveCalls() []struct {
	Ctx  context.Context
	In   *gophkeeperv1.RemoveDataRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *gophkeeperv1.RemoveDataRequest
		Opts []grpc.CallOption
	}
	mock.lockRemove.RLock()
	calls = mock.calls.Remove
	mock.lockRemove.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *LoginServiceClientForMockingMock) Save(ctx context.Context, in *gophkeeperv1.Login, opts ...grpc.CallOption) (*empty.Empty, error) {
	callInfo := struct {
		Ctx  context.Context
		In   *gophkeeperv1.Login
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	if mock.SaveFunc == nil {
		var (
			vOut   *empty.Empty
			errOut error
		)
		return vOut, errOut
	}
	return mock.SaveFunc(ctx, in, opts...)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//
//	len(mockedLoginServiceClientForMocking.SaveCalls())
func (mock *LoginServiceClientForMockingMock) SaveCalls() []struct {
	Ctx  context.Context
	In   *gophkeeperv1.Login
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *gophkeeperv1.Login
		Opts []grpc.CallOption
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *LoginServiceClientForMockingMock) Update(ctx context.Context, in *gophkeeperv1.Login, opts ...grpc.CallOption) (*empty.Empty, error) {
	callInfo := struct {
		Ctx  context.Context
		In   *gophkeeperv1.Login
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	if mock.UpdateFunc == nil {
		var (
			vOut   *empty.Empty
			errOut error
		)
		return vOut, errOut
	}
	return mock.UpdateFunc(ctx, in, opts...)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedLoginServiceClientForMocking.UpdateCalls())
func (mock *LoginServiceClientForMockingMock) UpdateCalls() []struct {
	Ctx  context.Context
	In   *gophkeeperv1.Login
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *gophkeeperv1.Login
		Opts []grpc.CallOption
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}

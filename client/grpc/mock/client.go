// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: matryer

package mock

import (
	"context"
	"sync"

	"github.com/golang/protobuf/ptypes/empty"
	"github.com/mkolibaba/gophkeeper/proto/gen/go/gophkeeperv1"
	"google.golang.org/grpc"
)

// Ensure that AuthorizationServiceClientMock does implement gophkeeperv1.AuthorizationServiceClient.
// If this is not the case, regenerate this file with mockery.
var _ gophkeeperv1.AuthorizationServiceClient = &AuthorizationServiceClientMock{}

// AuthorizationServiceClientMock is a mock implementation of gophkeeperv1.AuthorizationServiceClient.
//
//	func TestSomethingThatUsesAuthorizationServiceClient(t *testing.T) {
//
//		// make and configure a mocked gophkeeperv1.AuthorizationServiceClient
//		mockedAuthorizationServiceClient := &AuthorizationServiceClientMock{
//			AuthorizeFunc: func(ctx context.Context, in *gophkeeperv1.UserCredentials, opts ...grpc.CallOption) (*gophkeeperv1.TokenResponse, error) {
//				panic("mock out the Authorize method")
//			},
//			RegisterFunc: func(ctx context.Context, in *gophkeeperv1.UserCredentials, opts ...grpc.CallOption) (*gophkeeperv1.TokenResponse, error) {
//				panic("mock out the Register method")
//			},
//		}
//
//		// use mockedAuthorizationServiceClient in code that requires gophkeeperv1.AuthorizationServiceClient
//		// and then make assertions.
//
//	}
type AuthorizationServiceClientMock struct {
	// AuthorizeFunc mocks the Authorize method.
	AuthorizeFunc func(ctx context.Context, in *gophkeeperv1.UserCredentials, opts ...grpc.CallOption) (*gophkeeperv1.TokenResponse, error)

	// RegisterFunc mocks the Register method.
	RegisterFunc func(ctx context.Context, in *gophkeeperv1.UserCredentials, opts ...grpc.CallOption) (*gophkeeperv1.TokenResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// Authorize holds details about calls to the Authorize method.
		Authorize []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *gophkeeperv1.UserCredentials
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// Register holds details about calls to the Register method.
		Register []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *gophkeeperv1.UserCredentials
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
	}
	lockAuthorize sync.RWMutex
	lockRegister  sync.RWMutex
}

// Authorize calls AuthorizeFunc.
func (mock *AuthorizationServiceClientMock) Authorize(ctx context.Context, in *gophkeeperv1.UserCredentials, opts ...grpc.CallOption) (*gophkeeperv1.TokenResponse, error) {
	callInfo := struct {
		Ctx  context.Context
		In   *gophkeeperv1.UserCredentials
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockAuthorize.Lock()
	mock.calls.Authorize = append(mock.calls.Authorize, callInfo)
	mock.lockAuthorize.Unlock()
	if mock.AuthorizeFunc == nil {
		var (
			tokenResponse *gophkeeperv1.TokenResponse
			err           error
		)
		return tokenResponse, err
	}
	return mock.AuthorizeFunc(ctx, in, opts...)
}

// AuthorizeCalls gets all the calls that were made to Authorize.
// Check the length with:
//
//	len(mockedAuthorizationServiceClient.AuthorizeCalls())
func (mock *AuthorizationServiceClientMock) AuthorizeCalls() []struct {
	Ctx  context.Context
	In   *gophkeeperv1.UserCredentials
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *gophkeeperv1.UserCredentials
		Opts []grpc.CallOption
	}
	mock.lockAuthorize.RLock()
	calls = mock.calls.Authorize
	mock.lockAuthorize.RUnlock()
	return calls
}

// Register calls RegisterFunc.
func (mock *AuthorizationServiceClientMock) Register(ctx context.Context, in *gophkeeperv1.UserCredentials, opts ...grpc.CallOption) (*gophkeeperv1.TokenResponse, error) {
	callInfo := struct {
		Ctx  context.Context
		In   *gophkeeperv1.UserCredentials
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockRegister.Lock()
	mock.calls.Register = append(mock.calls.Register, callInfo)
	mock.lockRegister.Unlock()
	if mock.RegisterFunc == nil {
		var (
			tokenResponse *gophkeeperv1.TokenResponse
			err           error
		)
		return tokenResponse, err
	}
	return mock.RegisterFunc(ctx, in, opts...)
}

// RegisterCalls gets all the calls that were made to Register.
// Check the length with:
//
//	len(mockedAuthorizationServiceClient.RegisterCalls())
func (mock *AuthorizationServiceClientMock) RegisterCalls() []struct {
	Ctx  context.Context
	In   *gophkeeperv1.UserCredentials
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *gophkeeperv1.UserCredentials
		Opts []grpc.CallOption
	}
	mock.lockRegister.RLock()
	calls = mock.calls.Register
	mock.lockRegister.RUnlock()
	return calls
}

// Ensure that CardServiceClientMock does implement gophkeeperv1.CardServiceClient.
// If this is not the case, regenerate this file with mockery.
var _ gophkeeperv1.CardServiceClient = &CardServiceClientMock{}

// CardServiceClientMock is a mock implementation of gophkeeperv1.CardServiceClient.
//
//	func TestSomethingThatUsesCardServiceClient(t *testing.T) {
//
//		// make and configure a mocked gophkeeperv1.CardServiceClient
//		mockedCardServiceClient := &CardServiceClientMock{
//			GetAllFunc: func(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*gophkeeperv1.GetAllCardsResponse, error) {
//				panic("mock out the GetAll method")
//			},
//			RemoveFunc: func(ctx context.Context, in *gophkeeperv1.RemoveDataRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
//				panic("mock out the Remove method")
//			},
//			SaveFunc: func(ctx context.Context, in *gophkeeperv1.Card, opts ...grpc.CallOption) (*empty.Empty, error) {
//				panic("mock out the Save method")
//			},
//			UpdateFunc: func(ctx context.Context, in *gophkeeperv1.Card, opts ...grpc.CallOption) (*empty.Empty, error) {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedCardServiceClient in code that requires gophkeeperv1.CardServiceClient
//		// and then make assertions.
//
//	}
type CardServiceClientMock struct {
	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*gophkeeperv1.GetAllCardsResponse, error)

	// RemoveFunc mocks the Remove method.
	RemoveFunc func(ctx context.Context, in *gophkeeperv1.RemoveDataRequest, opts ...grpc.CallOption) (*empty.Empty, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, in *gophkeeperv1.Card, opts ...grpc.CallOption) (*empty.Empty, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, in *gophkeeperv1.Card, opts ...grpc.CallOption) (*empty.Empty, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *empty.Empty
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// Remove holds details about calls to the Remove method.
		Remove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *gophkeeperv1.RemoveDataRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *gophkeeperv1.Card
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *gophkeeperv1.Card
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
	}
	lockGetAll sync.RWMutex
	lockRemove sync.RWMutex
	lockSave   sync.RWMutex
	lockUpdate sync.RWMutex
}

// GetAll calls GetAllFunc.
func (mock *CardServiceClientMock) GetAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*gophkeeperv1.GetAllCardsResponse, error) {
	callInfo := struct {
		Ctx  context.Context
		In   *empty.Empty
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	if mock.GetAllFunc == nil {
		var (
			getAllCardsResponse *gophkeeperv1.GetAllCardsResponse
			err                 error
		)
		return getAllCardsResponse, err
	}
	return mock.GetAllFunc(ctx, in, opts...)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedCardServiceClient.GetAllCalls())
func (mock *CardServiceClientMock) GetAllCalls() []struct {
	Ctx  context.Context
	In   *empty.Empty
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *empty.Empty
		Opts []grpc.CallOption
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// Remove calls RemoveFunc.
func (mock *CardServiceClientMock) Remove(ctx context.Context, in *gophkeeperv1.RemoveDataRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	callInfo := struct {
		Ctx  context.Context
		In   *gophkeeperv1.RemoveDataRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockRemove.Lock()
	mock.calls.Remove = append(mock.calls.Remove, callInfo)
	mock.lockRemove.Unlock()
	if mock.RemoveFunc == nil {
		var (
			v   *empty.Empty
			err error
		)
		return v, err
	}
	return mock.RemoveFunc(ctx, in, opts...)
}

// RemoveCalls gets all the calls that were made to Remove.
// Check the length with:
//
//	len(mockedCardServiceClient.RemoveCalls())
func (mock *CardServiceClientMock) RemoveCalls() []struct {
	Ctx  context.Context
	In   *gophkeeperv1.RemoveDataRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *gophkeeperv1.RemoveDataRequest
		Opts []grpc.CallOption
	}
	mock.lockRemove.RLock()
	calls = mock.calls.Remove
	mock.lockRemove.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *CardServiceClientMock) Save(ctx context.Context, in *gophkeeperv1.Card, opts ...grpc.CallOption) (*empty.Empty, error) {
	callInfo := struct {
		Ctx  context.Context
		In   *gophkeeperv1.Card
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	if mock.SaveFunc == nil {
		var (
			v   *empty.Empty
			err error
		)
		return v, err
	}
	return mock.SaveFunc(ctx, in, opts...)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//
//	len(mockedCardServiceClient.SaveCalls())
func (mock *CardServiceClientMock) SaveCalls() []struct {
	Ctx  context.Context
	In   *gophkeeperv1.Card
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *gophkeeperv1.Card
		Opts []grpc.CallOption
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *CardServiceClientMock) Update(ctx context.Context, in *gophkeeperv1.Card, opts ...grpc.CallOption) (*empty.Empty, error) {
	callInfo := struct {
		Ctx  context.Context
		In   *gophkeeperv1.Card
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	if mock.UpdateFunc == nil {
		var (
			v   *empty.Empty
			err error
		)
		return v, err
	}
	return mock.UpdateFunc(ctx, in, opts...)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedCardServiceClient.UpdateCalls())
func (mock *CardServiceClientMock) UpdateCalls() []struct {
	Ctx  context.Context
	In   *gophkeeperv1.Card
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *gophkeeperv1.Card
		Opts []grpc.CallOption
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}

// Ensure that LoginServiceClientMock does implement gophkeeperv1.LoginServiceClient.
// If this is not the case, regenerate this file with mockery.
var _ gophkeeperv1.LoginServiceClient = &LoginServiceClientMock{}

// LoginServiceClientMock is a mock implementation of gophkeeperv1.LoginServiceClient.
//
//	func TestSomethingThatUsesLoginServiceClient(t *testing.T) {
//
//		// make and configure a mocked gophkeeperv1.LoginServiceClient
//		mockedLoginServiceClient := &LoginServiceClientMock{
//			GetAllFunc: func(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*gophkeeperv1.GetAllLoginsResponse, error) {
//				panic("mock out the GetAll method")
//			},
//			RemoveFunc: func(ctx context.Context, in *gophkeeperv1.RemoveDataRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
//				panic("mock out the Remove method")
//			},
//			SaveFunc: func(ctx context.Context, in *gophkeeperv1.Login, opts ...grpc.CallOption) (*empty.Empty, error) {
//				panic("mock out the Save method")
//			},
//			UpdateFunc: func(ctx context.Context, in *gophkeeperv1.Login, opts ...grpc.CallOption) (*empty.Empty, error) {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedLoginServiceClient in code that requires gophkeeperv1.LoginServiceClient
//		// and then make assertions.
//
//	}
type LoginServiceClientMock struct {
	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*gophkeeperv1.GetAllLoginsResponse, error)

	// RemoveFunc mocks the Remove method.
	RemoveFunc func(ctx context.Context, in *gophkeeperv1.RemoveDataRequest, opts ...grpc.CallOption) (*empty.Empty, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, in *gophkeeperv1.Login, opts ...grpc.CallOption) (*empty.Empty, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, in *gophkeeperv1.Login, opts ...grpc.CallOption) (*empty.Empty, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *empty.Empty
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// Remove holds details about calls to the Remove method.
		Remove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *gophkeeperv1.RemoveDataRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *gophkeeperv1.Login
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *gophkeeperv1.Login
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
	}
	lockGetAll sync.RWMutex
	lockRemove sync.RWMutex
	lockSave   sync.RWMutex
	lockUpdate sync.RWMutex
}

// GetAll calls GetAllFunc.
func (mock *LoginServiceClientMock) GetAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*gophkeeperv1.GetAllLoginsResponse, error) {
	callInfo := struct {
		Ctx  context.Context
		In   *empty.Empty
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	if mock.GetAllFunc == nil {
		var (
			getAllLoginsResponse *gophkeeperv1.GetAllLoginsResponse
			err                  error
		)
		return getAllLoginsResponse, err
	}
	return mock.GetAllFunc(ctx, in, opts...)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedLoginServiceClient.GetAllCalls())
func (mock *LoginServiceClientMock) GetAllCalls() []struct {
	Ctx  context.Context
	In   *empty.Empty
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *empty.Empty
		Opts []grpc.CallOption
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// Remove calls RemoveFunc.
func (mock *LoginServiceClientMock) Remove(ctx context.Context, in *gophkeeperv1.RemoveDataRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	callInfo := struct {
		Ctx  context.Context
		In   *gophkeeperv1.RemoveDataRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockRemove.Lock()
	mock.calls.Remove = append(mock.calls.Remove, callInfo)
	mock.lockRemove.Unlock()
	if mock.RemoveFunc == nil {
		var (
			v   *empty.Empty
			err error
		)
		return v, err
	}
	return mock.RemoveFunc(ctx, in, opts...)
}

// RemoveCalls gets all the calls that were made to Remove.
// Check the length with:
//
//	len(mockedLoginServiceClient.RemoveCalls())
func (mock *LoginServiceClientMock) RemoveCalls() []struct {
	Ctx  context.Context
	In   *gophkeeperv1.RemoveDataRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *gophkeeperv1.RemoveDataRequest
		Opts []grpc.CallOption
	}
	mock.lockRemove.RLock()
	calls = mock.calls.Remove
	mock.lockRemove.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *LoginServiceClientMock) Save(ctx context.Context, in *gophkeeperv1.Login, opts ...grpc.CallOption) (*empty.Empty, error) {
	callInfo := struct {
		Ctx  context.Context
		In   *gophkeeperv1.Login
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	if mock.SaveFunc == nil {
		var (
			v   *empty.Empty
			err error
		)
		return v, err
	}
	return mock.SaveFunc(ctx, in, opts...)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//
//	len(mockedLoginServiceClient.SaveCalls())
func (mock *LoginServiceClientMock) SaveCalls() []struct {
	Ctx  context.Context
	In   *gophkeeperv1.Login
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *gophkeeperv1.Login
		Opts []grpc.CallOption
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *LoginServiceClientMock) Update(ctx context.Context, in *gophkeeperv1.Login, opts ...grpc.CallOption) (*empty.Empty, error) {
	callInfo := struct {
		Ctx  context.Context
		In   *gophkeeperv1.Login
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	if mock.UpdateFunc == nil {
		var (
			v   *empty.Empty
			err error
		)
		return v, err
	}
	return mock.UpdateFunc(ctx, in, opts...)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedLoginServiceClient.UpdateCalls())
func (mock *LoginServiceClientMock) UpdateCalls() []struct {
	Ctx  context.Context
	In   *gophkeeperv1.Login
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *gophkeeperv1.Login
		Opts []grpc.CallOption
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}

// Ensure that NoteServiceClientMock does implement gophkeeperv1.NoteServiceClient.
// If this is not the case, regenerate this file with mockery.
var _ gophkeeperv1.NoteServiceClient = &NoteServiceClientMock{}

// NoteServiceClientMock is a mock implementation of gophkeeperv1.NoteServiceClient.
//
//	func TestSomethingThatUsesNoteServiceClient(t *testing.T) {
//
//		// make and configure a mocked gophkeeperv1.NoteServiceClient
//		mockedNoteServiceClient := &NoteServiceClientMock{
//			GetAllFunc: func(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*gophkeeperv1.GetAllNotesResponse, error) {
//				panic("mock out the GetAll method")
//			},
//			RemoveFunc: func(ctx context.Context, in *gophkeeperv1.RemoveDataRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
//				panic("mock out the Remove method")
//			},
//			SaveFunc: func(ctx context.Context, in *gophkeeperv1.Note, opts ...grpc.CallOption) (*empty.Empty, error) {
//				panic("mock out the Save method")
//			},
//			UpdateFunc: func(ctx context.Context, in *gophkeeperv1.Note, opts ...grpc.CallOption) (*empty.Empty, error) {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedNoteServiceClient in code that requires gophkeeperv1.NoteServiceClient
//		// and then make assertions.
//
//	}
type NoteServiceClientMock struct {
	// GetAllFunc mocks the GetAll method.
	GetAllFunc func(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*gophkeeperv1.GetAllNotesResponse, error)

	// RemoveFunc mocks the Remove method.
	RemoveFunc func(ctx context.Context, in *gophkeeperv1.RemoveDataRequest, opts ...grpc.CallOption) (*empty.Empty, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, in *gophkeeperv1.Note, opts ...grpc.CallOption) (*empty.Empty, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(ctx context.Context, in *gophkeeperv1.Note, opts ...grpc.CallOption) (*empty.Empty, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetAll holds details about calls to the GetAll method.
		GetAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *empty.Empty
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// Remove holds details about calls to the Remove method.
		Remove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *gophkeeperv1.RemoveDataRequest
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *gophkeeperv1.Note
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// In is the in argument value.
			In *gophkeeperv1.Note
			// Opts is the opts argument value.
			Opts []grpc.CallOption
		}
	}
	lockGetAll sync.RWMutex
	lockRemove sync.RWMutex
	lockSave   sync.RWMutex
	lockUpdate sync.RWMutex
}

// GetAll calls GetAllFunc.
func (mock *NoteServiceClientMock) GetAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*gophkeeperv1.GetAllNotesResponse, error) {
	callInfo := struct {
		Ctx  context.Context
		In   *empty.Empty
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockGetAll.Lock()
	mock.calls.GetAll = append(mock.calls.GetAll, callInfo)
	mock.lockGetAll.Unlock()
	if mock.GetAllFunc == nil {
		var (
			getAllNotesResponse *gophkeeperv1.GetAllNotesResponse
			err                 error
		)
		return getAllNotesResponse, err
	}
	return mock.GetAllFunc(ctx, in, opts...)
}

// GetAllCalls gets all the calls that were made to GetAll.
// Check the length with:
//
//	len(mockedNoteServiceClient.GetAllCalls())
func (mock *NoteServiceClientMock) GetAllCalls() []struct {
	Ctx  context.Context
	In   *empty.Empty
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *empty.Empty
		Opts []grpc.CallOption
	}
	mock.lockGetAll.RLock()
	calls = mock.calls.GetAll
	mock.lockGetAll.RUnlock()
	return calls
}

// Remove calls RemoveFunc.
func (mock *NoteServiceClientMock) Remove(ctx context.Context, in *gophkeeperv1.RemoveDataRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	callInfo := struct {
		Ctx  context.Context
		In   *gophkeeperv1.RemoveDataRequest
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockRemove.Lock()
	mock.calls.Remove = append(mock.calls.Remove, callInfo)
	mock.lockRemove.Unlock()
	if mock.RemoveFunc == nil {
		var (
			v   *empty.Empty
			err error
		)
		return v, err
	}
	return mock.RemoveFunc(ctx, in, opts...)
}

// RemoveCalls gets all the calls that were made to Remove.
// Check the length with:
//
//	len(mockedNoteServiceClient.RemoveCalls())
func (mock *NoteServiceClientMock) RemoveCalls() []struct {
	Ctx  context.Context
	In   *gophkeeperv1.RemoveDataRequest
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *gophkeeperv1.RemoveDataRequest
		Opts []grpc.CallOption
	}
	mock.lockRemove.RLock()
	calls = mock.calls.Remove
	mock.lockRemove.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *NoteServiceClientMock) Save(ctx context.Context, in *gophkeeperv1.Note, opts ...grpc.CallOption) (*empty.Empty, error) {
	callInfo := struct {
		Ctx  context.Context
		In   *gophkeeperv1.Note
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	if mock.SaveFunc == nil {
		var (
			v   *empty.Empty
			err error
		)
		return v, err
	}
	return mock.SaveFunc(ctx, in, opts...)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//
//	len(mockedNoteServiceClient.SaveCalls())
func (mock *NoteServiceClientMock) SaveCalls() []struct {
	Ctx  context.Context
	In   *gophkeeperv1.Note
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *gophkeeperv1.Note
		Opts []grpc.CallOption
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *NoteServiceClientMock) Update(ctx context.Context, in *gophkeeperv1.Note, opts ...grpc.CallOption) (*empty.Empty, error) {
	callInfo := struct {
		Ctx  context.Context
		In   *gophkeeperv1.Note
		Opts []grpc.CallOption
	}{
		Ctx:  ctx,
		In:   in,
		Opts: opts,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	if mock.UpdateFunc == nil {
		var (
			v   *empty.Empty
			err error
		)
		return v, err
	}
	return mock.UpdateFunc(ctx, in, opts...)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedNoteServiceClient.UpdateCalls())
func (mock *NoteServiceClientMock) UpdateCalls() []struct {
	Ctx  context.Context
	In   *gophkeeperv1.Note
	Opts []grpc.CallOption
} {
	var calls []struct {
		Ctx  context.Context
		In   *gophkeeperv1.Note
		Opts []grpc.CallOption
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
